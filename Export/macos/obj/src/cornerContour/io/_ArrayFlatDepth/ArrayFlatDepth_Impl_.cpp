// Generated by Haxe 4.3.0-rc.1+5f599ba
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_cornerContour_io__ArrayFlatDepth_ArrayFlatDepth_Impl_
#include <cornerContour/io/_ArrayFlatDepth/ArrayFlatDepth_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_fc713b0348c910dc_7__new,"cornerContour.io._ArrayFlatDepth.ArrayFlatDepth_Impl_","_new",0x4363a341,"cornerContour.io._ArrayFlatDepth.ArrayFlatDepth_Impl_._new","cornerContour/io/ArrayFlatDepth.hx",7,0x972c30ee)
HX_LOCAL_STACK_FRAME(_hx_pos_fc713b0348c910dc_12_getArray,"cornerContour.io._ArrayFlatDepth.ArrayFlatDepth_Impl_","getArray",0x75377b03,"cornerContour.io._ArrayFlatDepth.ArrayFlatDepth_Impl_.getArray","cornerContour/io/ArrayFlatDepth.hx",12,0x972c30ee)
HX_LOCAL_STACK_FRAME(_hx_pos_fc713b0348c910dc_20_rangeToEnd,"cornerContour.io._ArrayFlatDepth.ArrayFlatDepth_Impl_","rangeToEnd",0x2b2dc803,"cornerContour.io._ArrayFlatDepth.ArrayFlatDepth_Impl_.rangeToEnd","cornerContour/io/ArrayFlatDepth.hx",20,0x972c30ee)
HX_LOCAL_STACK_FRAME(_hx_pos_fc713b0348c910dc_44_rangeToStart,"cornerContour.io._ArrayFlatDepth.ArrayFlatDepth_Impl_","rangeToStart",0xbbc3928a,"cornerContour.io._ArrayFlatDepth.ArrayFlatDepth_Impl_.rangeToStart","cornerContour/io/ArrayFlatDepth.hx",44,0x972c30ee)
HX_LOCAL_STACK_FRAME(_hx_pos_fc713b0348c910dc_70_rangeSwitch,"cornerContour.io._ArrayFlatDepth.ArrayFlatDepth_Impl_","rangeSwitch",0xe98abdb1,"cornerContour.io._ArrayFlatDepth.ArrayFlatDepth_Impl_.rangeSwitch","cornerContour/io/ArrayFlatDepth.hx",70,0x972c30ee)
namespace cornerContour{
namespace io{
namespace _ArrayFlatDepth{

void ArrayFlatDepth_Impl__obj::__construct() { }

Dynamic ArrayFlatDepth_Impl__obj::__CreateEmpty() { return new ArrayFlatDepth_Impl__obj; }

void *ArrayFlatDepth_Impl__obj::_hx_vtable = 0;

Dynamic ArrayFlatDepth_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ArrayFlatDepth_Impl__obj > _hx_result = new ArrayFlatDepth_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ArrayFlatDepth_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x78fa2b7a;
}

::Array< Float > ArrayFlatDepth_Impl__obj::_new(){
            	HX_STACKFRAME(&_hx_pos_fc713b0348c910dc_7__new)
HXLINE(   9)		::Array< Float > this1 = ::Array_obj< Float >::__new();
HXDLIN(   9)		this1[0] = ((Float)0.);
HXLINE(   7)		::Array< Float > this2 = this1;
HXDLIN(   7)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ArrayFlatDepth_Impl__obj,_new,return )

 ::lime::utils::ArrayBufferView ArrayFlatDepth_Impl__obj::getArray(::Array< Float > this1){
            	HX_GC_STACKFRAME(&_hx_pos_fc713b0348c910dc_12_getArray)
HXLINE(  13)		 ::Dynamic elements = (this1->length - 1);
HXDLIN(  13)		 ::haxe::io::Bytes buffer = null();
HXDLIN(  13)		::cpp::VirtualArray array = null();
HXDLIN(  13)		 ::lime::utils::ArrayBufferView view = null();
HXDLIN(  13)		 ::Dynamic len = null();
HXDLIN(  13)		 ::lime::utils::ArrayBufferView this2;
HXDLIN(  13)		if (::hx::IsNotNull( elements )) {
HXLINE(  13)			this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,8);
            		}
            		else {
HXLINE(  13)			if (::hx::IsNotNull( array )) {
HXLINE(  13)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  13)				_this->byteOffset = 0;
HXDLIN(  13)				_this->length = array->get_length();
HXDLIN(  13)				_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  13)				 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  13)				_this->buffer = this1;
HXDLIN(  13)				_this->copyFromArray(array,null());
HXDLIN(  13)				this2 = _this;
            			}
            			else {
HXLINE(  13)				if (::hx::IsNotNull( view )) {
HXLINE(  13)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  13)					 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN(  13)					int srcLength = view->length;
HXDLIN(  13)					int srcByteOffset = view->byteOffset;
HXDLIN(  13)					int srcElementSize = view->bytesPerElement;
HXDLIN(  13)					int elementSize = _this->bytesPerElement;
HXDLIN(  13)					if ((view->type == _this->type)) {
HXLINE(  13)						int srcLength = srcData->length;
HXDLIN(  13)						int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  13)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  13)						_this->buffer = this1;
HXDLIN(  13)						_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            					}
            					else {
HXLINE(  13)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            					}
HXDLIN(  13)					_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  13)					_this->byteOffset = 0;
HXDLIN(  13)					_this->length = srcLength;
HXDLIN(  13)					this2 = _this;
            				}
            				else {
HXLINE(  13)					if (::hx::IsNotNull( buffer )) {
HXLINE(  13)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  13)						int in_byteOffset = 0;
HXDLIN(  13)						if ((in_byteOffset < 0)) {
HXLINE(  13)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            						}
HXDLIN(  13)						if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE(  13)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            						}
HXDLIN(  13)						int bufferByteLength = buffer->length;
HXDLIN(  13)						int elementSize = _this->bytesPerElement;
HXDLIN(  13)						int newByteLength = bufferByteLength;
HXDLIN(  13)						if (::hx::IsNull( len )) {
HXLINE(  13)							newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  13)							if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE(  13)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            							}
HXDLIN(  13)							if ((newByteLength < 0)) {
HXLINE(  13)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            							}
            						}
            						else {
HXLINE(  13)							newByteLength = (( (int)(len) ) * _this->bytesPerElement);
HXDLIN(  13)							int newRange = (in_byteOffset + newByteLength);
HXDLIN(  13)							if ((newRange > bufferByteLength)) {
HXLINE(  13)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            							}
            						}
HXDLIN(  13)						_this->buffer = buffer;
HXDLIN(  13)						_this->byteOffset = in_byteOffset;
HXDLIN(  13)						_this->byteLength = newByteLength;
HXDLIN(  13)						_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  13)						this2 = _this;
            					}
            					else {
HXLINE(  13)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4)));
            					}
            				}
            			}
            		}
HXDLIN(  13)		 ::lime::utils::ArrayBufferView fa32 = this2;
HXLINE(  14)		{
HXLINE(  14)			int _g = 0;
HXDLIN(  14)			int _g1 = (this1->length - 1);
HXDLIN(  14)			while((_g < _g1)){
HXLINE(  14)				_g = (_g + 1);
HXDLIN(  14)				int i = (_g - 1);
HXLINE(  15)				{
HXLINE(  15)					Float val = this1->__get((i + 1));
HXDLIN(  15)					 ::__hxcpp_memory_set_float(fa32->buffer->b,(fa32->byteOffset + (i * 4)),val);
            				}
            			}
            		}
HXLINE(  17)		return fa32;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ArrayFlatDepth_Impl__obj,getArray,return )

bool ArrayFlatDepth_Impl__obj::rangeToEnd(::Array< Float > this1,int starting,int totalLen,int section){
            	HX_STACKFRAME(&_hx_pos_fc713b0348c910dc_20_rangeToEnd)
HXLINE(  21)		int ending = (starting + totalLen);
HXLINE(  22)		::Array< Float > temp = ::Array_obj< Float >::__new(0);
HXLINE(  23)		int count = 0;
HXLINE(  25)		{
HXLINE(  25)			int _g = starting;
HXDLIN(  25)			int _g1 = ending;
HXDLIN(  25)			while((_g < _g1)){
HXLINE(  25)				_g = (_g + 1);
HXDLIN(  25)				int i = (_g - 1);
HXLINE(  26)				count = (count + 1);
HXDLIN(  26)				temp[(count - 1)] = this1->__get((i + 1));
            			}
            		}
HXLINE(  29)		int left = (section - ending);
HXLINE(  30)		{
HXLINE(  30)			int _g2 = 0;
HXDLIN(  30)			int _g3 = left;
HXDLIN(  30)			while((_g2 < _g3)){
HXLINE(  30)				_g2 = (_g2 + 1);
HXDLIN(  30)				int i = (_g2 - 1);
HXLINE(  31)				{
HXLINE(  31)					Float v = this1->__get(((ending + i) + 1));
HXDLIN(  31)					this1[((starting + i) + 1)] = v;
            				}
            			}
            		}
HXLINE(  34)		int last = section;
HXLINE(  35)		int reserveTop = (last - totalLen);
HXLINE(  36)		count = 0;
HXLINE(  37)		{
HXLINE(  37)			int _g4 = reserveTop;
HXDLIN(  37)			int _g5 = last;
HXDLIN(  37)			while((_g4 < _g5)){
HXLINE(  37)				_g4 = (_g4 + 1);
HXDLIN(  37)				int i = (_g4 - 1);
HXLINE(  38)				{
HXLINE(  38)					count = (count + 1);
HXDLIN(  38)					Float v = temp->__get((count - 1));
HXDLIN(  38)					this1[(i + 1)] = v;
            				}
            			}
            		}
HXLINE(  40)		temp = null();
HXLINE(  41)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ArrayFlatDepth_Impl__obj,rangeToEnd,return )

bool ArrayFlatDepth_Impl__obj::rangeToStart(::Array< Float > this1,int starting,int totalLen){
            	HX_STACKFRAME(&_hx_pos_fc713b0348c910dc_44_rangeToStart)
HXLINE(  45)		if ((starting == 0)) {
HXLINE(  45)			return false;
            		}
HXLINE(  46)		int ending = (starting + totalLen);
HXLINE(  47)		::Array< Float > temp = ::Array_obj< Float >::__new(0);
HXLINE(  48)		int count = 0;
HXLINE(  50)		{
HXLINE(  50)			int _g = starting;
HXDLIN(  50)			int _g1 = ending;
HXDLIN(  50)			while((_g < _g1)){
HXLINE(  50)				_g = (_g + 1);
HXDLIN(  50)				int i = (_g - 1);
HXLINE(  51)				temp[count] = this1->__get((i + 1));
HXLINE(  52)				count = (count + 1);
            			}
            		}
HXLINE(  55)		count = totalLen;
HXLINE(  56)		{
HXLINE(  56)			int _g2 = 0;
HXDLIN(  56)			int _g3 = starting;
HXDLIN(  56)			while((_g2 < _g3)){
HXLINE(  56)				_g2 = (_g2 + 1);
HXDLIN(  56)				int i = (_g2 - 1);
HXLINE(  57)				{
HXLINE(  57)					Float v = this1->__get((((starting - 1) - i) + 1));
HXDLIN(  57)					this1[(((ending - 1) - i) + 1)] = v;
            				}
            			}
            		}
HXLINE(  60)		count = 0;
HXLINE(  61)		{
HXLINE(  61)			int _g4 = 0;
HXDLIN(  61)			int _g5 = totalLen;
HXDLIN(  61)			while((_g4 < _g5)){
HXLINE(  61)				_g4 = (_g4 + 1);
HXDLIN(  61)				int i = (_g4 - 1);
HXLINE(  62)				{
HXLINE(  62)					Float v = temp->__get((count - 2));
HXDLIN(  62)					this1[(i + 1)] = v;
            				}
HXLINE(  63)				count = (count + 1);
            			}
            		}
HXLINE(  65)		temp = null();
HXLINE(  66)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ArrayFlatDepth_Impl__obj,rangeToStart,return )

bool ArrayFlatDepth_Impl__obj::rangeSwitch(::Array< Float > this1,int start0,int start1,int totalLen){
            	HX_STACKFRAME(&_hx_pos_fc713b0348c910dc_70_rangeSwitch)
HXDLIN(  70)		bool _hx_tmp;
HXDLIN(  70)		if (((start0 + totalLen) > (this1->length - 1))) {
HXDLIN(  70)			_hx_tmp = ((start1 + totalLen) > (this1->length - 1));
            		}
            		else {
HXDLIN(  70)			_hx_tmp = false;
            		}
HXDLIN(  70)		if (_hx_tmp) {
HXLINE(  71)			Float temp0;
HXLINE(  72)			Float temp1;
HXLINE(  73)			{
HXLINE(  73)				int _g = 0;
HXDLIN(  73)				int _g1 = totalLen;
HXDLIN(  73)				while((_g < _g1)){
HXLINE(  73)					_g = (_g + 1);
HXDLIN(  73)					int i = (_g - 1);
HXLINE(  74)					temp0 = this1->__get(((start0 + i) + 1));
HXLINE(  75)					temp1 = this1->__get(((start1 + i) + 1));
HXLINE(  76)					this1[((start0 + i) + 1)] = temp1;
HXLINE(  77)					this1[((start1 + i) + 1)] = temp0;
            				}
            			}
HXLINE(  79)			return true;
            		}
            		else {
HXLINE(  81)			return false;
            		}
HXLINE(  70)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ArrayFlatDepth_Impl__obj,rangeSwitch,return )


ArrayFlatDepth_Impl__obj::ArrayFlatDepth_Impl__obj()
{
}

bool ArrayFlatDepth_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getArray") ) { outValue = getArray_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rangeToEnd") ) { outValue = rangeToEnd_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"rangeSwitch") ) { outValue = rangeSwitch_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rangeToStart") ) { outValue = rangeToStart_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ArrayFlatDepth_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ArrayFlatDepth_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class ArrayFlatDepth_Impl__obj::__mClass;

static ::String ArrayFlatDepth_Impl__obj_sStaticFields[] = {
	HX_("_new",61,15,1f,3f),
	HX_("getArray",23,7d,66,85),
	HX_("rangeToEnd",23,92,b9,e6),
	HX_("rangeToStart",aa,24,6e,49),
	HX_("rangeSwitch",91,cf,4f,48),
	::String(null())
};

void ArrayFlatDepth_Impl__obj::__register()
{
	ArrayFlatDepth_Impl__obj _hx_dummy;
	ArrayFlatDepth_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("cornerContour.io._ArrayFlatDepth.ArrayFlatDepth_Impl_",8e,9e,9a,53);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ArrayFlatDepth_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ArrayFlatDepth_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ArrayFlatDepth_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArrayFlatDepth_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArrayFlatDepth_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace cornerContour
} // end namespace io
} // end namespace _ArrayFlatDepth
