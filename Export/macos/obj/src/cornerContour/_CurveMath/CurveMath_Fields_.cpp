// Generated by Haxe 4.3.0-rc.1+5f599ba
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_cornerContour__CurveMath_CurveMath_Fields_
#include <cornerContour/_CurveMath/CurveMath_Fields_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_09436495fed38cff_3_distance,"cornerContour._CurveMath.CurveMath_Fields_","distance",0xe23e83d2,"cornerContour._CurveMath.CurveMath_Fields_.distance","cornerContour/CurveMath.hx",3,0x69b0ae31)
HX_LOCAL_STACK_FRAME(_hx_pos_09436495fed38cff_11_quadCurve,"cornerContour._CurveMath.CurveMath_Fields_","quadCurve",0xe582eb2b,"cornerContour._CurveMath.CurveMath_Fields_.quadCurve","cornerContour/CurveMath.hx",11,0x69b0ae31)
HX_LOCAL_STACK_FRAME(_hx_pos_09436495fed38cff_30_cubicCurve,"cornerContour._CurveMath.CurveMath_Fields_","cubicCurve",0x757144e2,"cornerContour._CurveMath.CurveMath_Fields_.cubicCurve","cornerContour/CurveMath.hx",30,0x69b0ae31)
HX_LOCAL_STACK_FRAME(_hx_pos_09436495fed38cff_46_calculateQuadStep,"cornerContour._CurveMath.CurveMath_Fields_","calculateQuadStep",0x1b2a76fc,"cornerContour._CurveMath.CurveMath_Fields_.calculateQuadStep","cornerContour/CurveMath.hx",46,0x69b0ae31)
HX_LOCAL_STACK_FRAME(_hx_pos_09436495fed38cff_52_calculateCubicStep,"cornerContour._CurveMath.CurveMath_Fields_","calculateCubicStep",0x6accc24d,"cornerContour._CurveMath.CurveMath_Fields_.calculateCubicStep","cornerContour/CurveMath.hx",52,0x69b0ae31)
HX_LOCAL_STACK_FRAME(_hx_pos_09436495fed38cff_58_quadraticThru,"cornerContour._CurveMath.CurveMath_Fields_","quadraticThru",0x2f000772,"cornerContour._CurveMath.CurveMath_Fields_.quadraticThru","cornerContour/CurveMath.hx",58,0x69b0ae31)
HX_LOCAL_STACK_FRAME(_hx_pos_09436495fed38cff_63_quadratic,"cornerContour._CurveMath.CurveMath_Fields_","quadratic",0xe821639b,"cornerContour._CurveMath.CurveMath_Fields_.quadratic","cornerContour/CurveMath.hx",63,0x69b0ae31)
HX_LOCAL_STACK_FRAME(_hx_pos_09436495fed38cff_68_cubic,"cornerContour._CurveMath.CurveMath_Fields_","cubic",0xc2c7588d,"cornerContour._CurveMath.CurveMath_Fields_.cubic","cornerContour/CurveMath.hx",68,0x69b0ae31)
HX_LOCAL_STACK_FRAME(_hx_pos_09436495fed38cff_8_boot,"cornerContour._CurveMath.CurveMath_Fields_","boot",0x33daa24f,"cornerContour._CurveMath.CurveMath_Fields_.boot","cornerContour/CurveMath.hx",8,0x69b0ae31)
HX_LOCAL_STACK_FRAME(_hx_pos_09436495fed38cff_27_boot,"cornerContour._CurveMath.CurveMath_Fields_","boot",0x33daa24f,"cornerContour._CurveMath.CurveMath_Fields_.boot","cornerContour/CurveMath.hx",27,0x69b0ae31)
namespace cornerContour{
namespace _CurveMath{

void CurveMath_Fields__obj::__construct() { }

Dynamic CurveMath_Fields__obj::__CreateEmpty() { return new CurveMath_Fields__obj; }

void *CurveMath_Fields__obj::_hx_vtable = 0;

Dynamic CurveMath_Fields__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CurveMath_Fields__obj > _hx_result = new CurveMath_Fields__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CurveMath_Fields__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7d805dc1;
}

Float CurveMath_Fields__obj::distance(Float px,Float py,Float qx,Float qy){
            	HX_STACKFRAME(&_hx_pos_09436495fed38cff_3_distance)
HXLINE(   4)		Float x = (px - qx);
HXLINE(   5)		Float y = (py - qy);
HXLINE(   6)		return ::Math_obj::sqrt(((x * x) + (y * y)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(CurveMath_Fields__obj,distance,return )

Float CurveMath_Fields__obj::quadStep;

::Array< Float > CurveMath_Fields__obj::quadCurve(::Array< Float > p,Float ax,Float ay,Float bx,Float by,Float cx,Float cy){
            	HX_STACKFRAME(&_hx_pos_09436495fed38cff_11_quadCurve)
HXLINE(  12)		Float x = (ax - bx);
HXDLIN(  12)		Float y = (ay - by);
HXDLIN(  12)		Float x1 = (bx - cx);
HXDLIN(  12)		Float y1 = (by - cy);
HXDLIN(  12)		Float approxDistance = (::Math_obj::sqrt(((x * x) + (y * y))) + ::Math_obj::sqrt(((x1 * x1) + (y1 * y1))));
HXDLIN(  12)		if ((approxDistance == 0)) {
HXLINE(  12)			approxDistance = ((Float)0.000001);
            		}
HXDLIN(  12)		Float step = ::Math_obj::min((( (Float)(1) ) / (approxDistance * ((Float)0.707))),::cornerContour::_CurveMath::CurveMath_Fields__obj::quadStep);
HXLINE(  13)		int l = p->length;
HXLINE(  14)		l = (l + 1);
HXDLIN(  14)		p[(l - 1)] = ax;
HXLINE(  15)		l = (l + 1);
HXDLIN(  15)		p[(l - 1)] = ay;
HXLINE(  16)		Float t = step;
HXLINE(  17)		while((t < ((Float)1.))){
HXLINE(  18)			l = (l + 1);
HXDLIN(  18)			Float u = (( (Float)(1) ) - t);
HXDLIN(  18)			p[(l - 1)] = (((::Math_obj::pow(u,( (Float)(2) )) * ax) + (((( (Float)(2) ) * u) * t) * bx)) + (::Math_obj::pow(t,( (Float)(2) )) * cx));
HXLINE(  19)			l = (l + 1);
HXDLIN(  19)			Float u1 = (( (Float)(1) ) - t);
HXDLIN(  19)			p[(l - 1)] = (((::Math_obj::pow(u1,( (Float)(2) )) * ay) + (((( (Float)(2) ) * u1) * t) * by)) + (::Math_obj::pow(t,( (Float)(2) )) * cy));
HXLINE(  20)			t = (t + step);
            		}
HXLINE(  22)		l = (l + 1);
HXDLIN(  22)		p[(l - 1)] = cx;
HXLINE(  23)		l = (l + 1);
HXDLIN(  23)		p[(l - 1)] = cy;
HXLINE(  24)		return p;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(CurveMath_Fields__obj,quadCurve,return )

Float CurveMath_Fields__obj::cubicStep;

::Array< Float > CurveMath_Fields__obj::cubicCurve(::Array< Float > p,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_09436495fed38cff_30_cubicCurve)
HXLINE(  31)		Float x = (ax - bx);
HXDLIN(  31)		Float y = (ay - by);
HXDLIN(  31)		Float x1 = (bx - cx);
HXDLIN(  31)		Float y1 = (by - cy);
HXDLIN(  31)		Float x2 = (cx - dx);
HXDLIN(  31)		Float y2 = (cy - dy);
HXDLIN(  31)		Float approxDistance = ((::Math_obj::sqrt(((x * x) + (y * y))) + ::Math_obj::sqrt(((x1 * x1) + (y1 * y1)))) + ::Math_obj::sqrt(((x2 * x2) + (y2 * y2))));
HXDLIN(  31)		if ((approxDistance == 0)) {
HXLINE(  31)			approxDistance = ((Float)0.000001);
            		}
HXDLIN(  31)		Float step = ::Math_obj::min((( (Float)(1) ) / (approxDistance * ((Float)0.707))),((Float)0.03));
HXLINE(  32)		int l = p->length;
HXLINE(  33)		l = (l + 1);
HXDLIN(  33)		p[(l - 1)] = ax;
HXLINE(  34)		l = (l + 1);
HXDLIN(  34)		p[(l - 1)] = ay;
HXLINE(  35)		Float t = step;
HXLINE(  36)		while((t < ((Float)1.))){
HXLINE(  37)			l = (l + 1);
HXDLIN(  37)			Float u = (( (Float)(1) ) - t);
HXDLIN(  37)			p[(l - 1)] = ((((::Math_obj::pow(u,( (Float)(3) )) * ax) + (((( (Float)(3) ) * ::Math_obj::pow(u,( (Float)(2) ))) * t) * bx)) + (((( (Float)(3) ) * u) * ::Math_obj::pow(t,( (Float)(2) ))) * cx)) + (::Math_obj::pow(t,( (Float)(3) )) * dx));
HXLINE(  38)			l = (l + 1);
HXDLIN(  38)			Float u1 = (( (Float)(1) ) - t);
HXDLIN(  38)			p[(l - 1)] = ((((::Math_obj::pow(u1,( (Float)(3) )) * ay) + (((( (Float)(3) ) * ::Math_obj::pow(u1,( (Float)(2) ))) * t) * by)) + (((( (Float)(3) ) * u1) * ::Math_obj::pow(t,( (Float)(2) ))) * cy)) + (::Math_obj::pow(t,( (Float)(3) )) * dy));
HXLINE(  39)			t = (t + step);
            		}
HXLINE(  41)		l = (l + 1);
HXDLIN(  41)		p[(l - 1)] = dx;
HXLINE(  42)		l = (l + 1);
HXDLIN(  42)		p[(l - 1)] = dy;
HXLINE(  43)		return p;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(CurveMath_Fields__obj,cubicCurve,return )

Float CurveMath_Fields__obj::calculateQuadStep(Float ax,Float ay,Float bx,Float by,Float cx,Float cy){
            	HX_STACKFRAME(&_hx_pos_09436495fed38cff_46_calculateQuadStep)
HXLINE(  47)		Float x = (ax - bx);
HXDLIN(  47)		Float y = (ay - by);
HXDLIN(  47)		Float x1 = (bx - cx);
HXDLIN(  47)		Float y1 = (by - cy);
HXDLIN(  47)		Float approxDistance = (::Math_obj::sqrt(((x * x) + (y * y))) + ::Math_obj::sqrt(((x1 * x1) + (y1 * y1))));
HXLINE(  48)		if ((approxDistance == 0)) {
HXLINE(  48)			approxDistance = ((Float)0.000001);
            		}
HXLINE(  49)		return ::Math_obj::min((( (Float)(1) ) / (approxDistance * ((Float)0.707))),::cornerContour::_CurveMath::CurveMath_Fields__obj::quadStep);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(CurveMath_Fields__obj,calculateQuadStep,return )

Float CurveMath_Fields__obj::calculateCubicStep(Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_09436495fed38cff_52_calculateCubicStep)
HXLINE(  53)		Float x = (ax - bx);
HXDLIN(  53)		Float y = (ay - by);
HXDLIN(  53)		Float x1 = (bx - cx);
HXDLIN(  53)		Float y1 = (by - cy);
HXDLIN(  53)		Float x2 = (cx - dx);
HXDLIN(  53)		Float y2 = (cy - dy);
HXDLIN(  53)		Float approxDistance = ((::Math_obj::sqrt(((x * x) + (y * y))) + ::Math_obj::sqrt(((x1 * x1) + (y1 * y1)))) + ::Math_obj::sqrt(((x2 * x2) + (y2 * y2))));
HXLINE(  54)		if ((approxDistance == 0)) {
HXLINE(  54)			approxDistance = ((Float)0.000001);
            		}
HXLINE(  55)		return ::Math_obj::min((( (Float)(1) ) / (approxDistance * ((Float)0.707))),((Float)0.03));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(CurveMath_Fields__obj,calculateCubicStep,return )

Float CurveMath_Fields__obj::quadraticThru(Float t,Float s,Float c,Float e){
            	HX_STACKFRAME(&_hx_pos_09436495fed38cff_58_quadraticThru)
HXLINE(  59)		c = ((( (Float)(2) ) * c) - (((Float)0.5) * (s + e)));
HXLINE(  60)		Float u = (( (Float)(1) ) - t);
HXDLIN(  60)		return (((::Math_obj::pow(u,( (Float)(2) )) * s) + (((( (Float)(2) ) * u) * t) * c)) + (::Math_obj::pow(t,( (Float)(2) )) * e));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(CurveMath_Fields__obj,quadraticThru,return )

Float CurveMath_Fields__obj::quadratic(Float t,Float s,Float c,Float e){
            	HX_STACKFRAME(&_hx_pos_09436495fed38cff_63_quadratic)
HXLINE(  64)		Float u = (( (Float)(1) ) - t);
HXLINE(  65)		return (((::Math_obj::pow(u,( (Float)(2) )) * s) + (((( (Float)(2) ) * u) * t) * c)) + (::Math_obj::pow(t,( (Float)(2) )) * e));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(CurveMath_Fields__obj,quadratic,return )

Float CurveMath_Fields__obj::cubic(Float t,Float s,Float c1,Float c2,Float e){
            	HX_STACKFRAME(&_hx_pos_09436495fed38cff_68_cubic)
HXLINE(  69)		Float u = (( (Float)(1) ) - t);
HXLINE(  70)		return ((((::Math_obj::pow(u,( (Float)(3) )) * s) + (((( (Float)(3) ) * ::Math_obj::pow(u,( (Float)(2) ))) * t) * c1)) + (((( (Float)(3) ) * u) * ::Math_obj::pow(t,( (Float)(2) ))) * c2)) + (::Math_obj::pow(t,( (Float)(3) )) * e));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(CurveMath_Fields__obj,cubic,return )


CurveMath_Fields__obj::CurveMath_Fields__obj()
{
}

bool CurveMath_Fields__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cubic") ) { outValue = cubic_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quadStep") ) { outValue = ( quadStep ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"quadCurve") ) { outValue = quadCurve_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quadratic") ) { outValue = quadratic_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cubicCurve") ) { outValue = cubicCurve_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"quadraticThru") ) { outValue = quadraticThru_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"calculateQuadStep") ) { outValue = calculateQuadStep_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"calculateCubicStep") ) { outValue = calculateCubicStep_dyn(); return true; }
	}
	return false;
}

bool CurveMath_Fields__obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"quadStep") ) { quadStep=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CurveMath_Fields__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo CurveMath_Fields__obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &CurveMath_Fields__obj::quadStep,HX_("quadStep",b3,bb,78,d4)},
	{::hx::fsFloat,(void *) &CurveMath_Fields__obj::cubicStep,HX_("cubicStep",b6,9d,fa,d5)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void CurveMath_Fields__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CurveMath_Fields__obj::quadStep,"quadStep");
	HX_MARK_MEMBER_NAME(CurveMath_Fields__obj::cubicStep,"cubicStep");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CurveMath_Fields__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CurveMath_Fields__obj::quadStep,"quadStep");
	HX_VISIT_MEMBER_NAME(CurveMath_Fields__obj::cubicStep,"cubicStep");
};

#endif

::hx::Class CurveMath_Fields__obj::__mClass;

static ::String CurveMath_Fields__obj_sStaticFields[] = {
	HX_("distance",35,93,f9,6b),
	HX_("quadStep",b3,bb,78,d4),
	HX_("quadCurve",68,52,75,df),
	HX_("cubicStep",b6,9d,fa,d5),
	HX_("cubicCurve",05,33,99,2f),
	HX_("calculateQuadStep",39,e3,e1,bb),
	HX_("calculateCubicStep",70,0b,94,6a),
	HX_("quadraticThru",2f,51,23,6f),
	HX_("quadratic",d8,ca,13,e2),
	HX_("cubic",4a,1d,4c,4e),
	::String(null())
};

void CurveMath_Fields__obj::__register()
{
	CurveMath_Fields__obj _hx_dummy;
	CurveMath_Fields__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("cornerContour._CurveMath.CurveMath_Fields_",71,f7,43,2b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CurveMath_Fields__obj::__GetStatic;
	__mClass->mSetStaticField = &CurveMath_Fields__obj::__SetStatic;
	__mClass->mMarkFunc = CurveMath_Fields__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CurveMath_Fields__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< CurveMath_Fields__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CurveMath_Fields__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CurveMath_Fields__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CurveMath_Fields__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CurveMath_Fields__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_09436495fed38cff_8_boot)
HXDLIN(   8)		quadStep = ((Float)0.03);
            	}
{
            	HX_STACKFRAME(&_hx_pos_09436495fed38cff_27_boot)
HXDLIN(  27)		cubicStep = ((Float)0.03);
            	}
}

} // end namespace cornerContour
} // end namespace _CurveMath
