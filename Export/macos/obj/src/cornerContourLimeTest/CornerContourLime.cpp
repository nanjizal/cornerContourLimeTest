// Generated by Haxe 4.3.0-rc.1+5f599ba
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_cornerContour_IPen
#include <cornerContour/IPen.h>
#endif
#ifndef INCLUDED_cornerContour_Pen2D
#include <cornerContour/Pen2D.h>
#endif
#ifndef INCLUDED_cornerContour_Sketcher
#include <cornerContour/Sketcher.h>
#endif
#ifndef INCLUDED_cornerContour_io__Array2DTriangles_Array2DTriangles_Impl_
#include <cornerContour/io/_Array2DTriangles/Array2DTriangles_Impl_.h>
#endif
#ifndef INCLUDED_cornerContourLimeTest_CornerContourLime
#include <cornerContourLimeTest/CornerContourLime.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_justPath_IPathContext
#include <justPath/IPathContext.h>
#endif
#ifndef INCLUDED_justPath_SvgPath
#include <justPath/SvgPath.h>
#endif
#ifndef INCLUDED_justPath_transform_ScaleTranslateContext
#include <justPath/transform/ScaleTranslateContext.h>
#endif
#ifndef INCLUDED_justPath_transform_TranslationContext
#include <justPath/transform/TranslationContext.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGLRenderContext_WebGLRenderContext_Impl_
#include <lime/graphics/_WebGLRenderContext/WebGLRenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9b600db2fdcf3f7f_37_new,"cornerContourLimeTest.CornerContourLime","new",0x11dcadca,"cornerContourLimeTest.CornerContourLime.new","cornerContourLimeTest/CornerContourLime.hx",37,0xebb8ff67)
HX_LOCAL_STACK_FRAME(_hx_pos_9b600db2fdcf3f7f_73_onWindowCreate,"cornerContourLimeTest.CornerContourLime","onWindowCreate",0xb3cd09a1,"cornerContourLimeTest.CornerContourLime.onWindowCreate","cornerContourLimeTest/CornerContourLime.hx",73,0xebb8ff67)
HX_LOCAL_STACK_FRAME(_hx_pos_9b600db2fdcf3f7f_97_update,"cornerContourLimeTest.CornerContourLime","update",0x74b566df,"cornerContourLimeTest.CornerContourLime.update","cornerContourLimeTest/CornerContourLime.hx",97,0xebb8ff67)
HX_LOCAL_STACK_FRAME(_hx_pos_9b600db2fdcf3f7f_102_render,"cornerContourLimeTest.CornerContourLime","render",0xf2d94c2c,"cornerContourLimeTest.CornerContourLime.render","cornerContourLimeTest/CornerContourLime.hx",102,0xebb8ff67)
HX_LOCAL_STACK_FRAME(_hx_pos_9b600db2fdcf3f7f_117_drawContours,"cornerContourLimeTest.CornerContourLime","drawContours",0x718226d3,"cornerContourLimeTest.CornerContourLime.drawContours","cornerContourLimeTest/CornerContourLime.hx",117,0xebb8ff67)
HX_LOCAL_STACK_FRAME(_hx_pos_9b600db2fdcf3f7f_127_rearrageDrawData,"cornerContourLimeTest.CornerContourLime","rearrageDrawData",0x078b32b5,"cornerContourLimeTest.CornerContourLime.rearrageDrawData","cornerContourLimeTest/CornerContourLime.hx",127,0xebb8ff67)
HX_LOCAL_STACK_FRAME(_hx_pos_9b600db2fdcf3f7f_203_gx,"cornerContourLimeTest.CornerContourLime","gx",0xba0d9807,"cornerContourLimeTest.CornerContourLime.gx","cornerContourLimeTest/CornerContourLime.hx",203,0xebb8ff67)
HX_LOCAL_STACK_FRAME(_hx_pos_9b600db2fdcf3f7f_207_gy,"cornerContourLimeTest.CornerContourLime","gy",0xba0d9808,"cornerContourLimeTest.CornerContourLime.gy","cornerContourLimeTest/CornerContourLime.hx",207,0xebb8ff67)
HX_LOCAL_STACK_FRAME(_hx_pos_9b600db2fdcf3f7f_213_birdSVG,"cornerContourLimeTest.CornerContourLime","birdSVG",0xd8ebf115,"cornerContourLimeTest.CornerContourLime.birdSVG","cornerContourLimeTest/CornerContourLime.hx",213,0xebb8ff67)
HX_LOCAL_STACK_FRAME(_hx_pos_9b600db2fdcf3f7f_229_cubicSVG,"cornerContourLimeTest.CornerContourLime","cubicSVG",0xa7975590,"cornerContourLimeTest.CornerContourLime.cubicSVG","cornerContourLimeTest/CornerContourLime.hx",229,0xebb8ff67)
HX_LOCAL_STACK_FRAME(_hx_pos_9b600db2fdcf3f7f_224_cubicSVG,"cornerContourLimeTest.CornerContourLime","cubicSVG",0xa7975590,"cornerContourLimeTest.CornerContourLime.cubicSVG","cornerContourLimeTest/CornerContourLime.hx",224,0xebb8ff67)
HX_LOCAL_STACK_FRAME(_hx_pos_9b600db2fdcf3f7f_244_quadSVG,"cornerContourLimeTest.CornerContourLime","quadSVG",0x4b265e47,"cornerContourLimeTest.CornerContourLime.quadSVG","cornerContourLimeTest/CornerContourLime.hx",244,0xebb8ff67)
HX_LOCAL_STACK_FRAME(_hx_pos_9b600db2fdcf3f7f_239_quadSVG,"cornerContourLimeTest.CornerContourLime","quadSVG",0x4b265e47,"cornerContourLimeTest.CornerContourLime.quadSVG","cornerContourLimeTest/CornerContourLime.hx",239,0xebb8ff67)
HX_LOCAL_STACK_FRAME(_hx_pos_9b600db2fdcf3f7f_254_arcSVG,"cornerContourLimeTest.CornerContourLime","arcSVG",0x9bab6808,"cornerContourLimeTest.CornerContourLime.arcSVG","cornerContourLimeTest/CornerContourLime.hx",254,0xebb8ff67)
static const int _hx_array_data_4fb3c0d8_18[] = {
	(int)-30,(int)100,(int)250,(int)400,
};
HX_LOCAL_STACK_FRAME(_hx_pos_9b600db2fdcf3f7f_275_drawSet,"cornerContourLimeTest.CornerContourLime","drawSet",0x080c5c68,"cornerContourLimeTest.CornerContourLime.drawSet","cornerContourLimeTest/CornerContourLime.hx",275,0xebb8ff67)
HX_LOCAL_STACK_FRAME(_hx_pos_9b600db2fdcf3f7f_278_draw_d,"cornerContourLimeTest.CornerContourLime","draw_d",0xcd8668ff,"cornerContourLimeTest.CornerContourLime.draw_d","cornerContourLimeTest/CornerContourLime.hx",278,0xebb8ff67)
HX_LOCAL_STACK_FRAME(_hx_pos_9b600db2fdcf3f7f_191_alphaChannel,"cornerContourLimeTest.CornerContourLime","alphaChannel",0xc60e6e5b,"cornerContourLimeTest.CornerContourLime.alphaChannel","cornerContourLimeTest/CornerContourLime.hx",191,0xebb8ff67)
HX_LOCAL_STACK_FRAME(_hx_pos_9b600db2fdcf3f7f_194_redChannel,"cornerContourLimeTest.CornerContourLime","redChannel",0xb71f8f48,"cornerContourLimeTest.CornerContourLime.redChannel","cornerContourLimeTest/CornerContourLime.hx",194,0xebb8ff67)
HX_LOCAL_STACK_FRAME(_hx_pos_9b600db2fdcf3f7f_197_greenChannel,"cornerContourLimeTest.CornerContourLime","greenChannel",0x8149ed96,"cornerContourLimeTest.CornerContourLime.greenChannel","cornerContourLimeTest/CornerContourLime.hx",197,0xebb8ff67)
HX_LOCAL_STACK_FRAME(_hx_pos_9b600db2fdcf3f7f_200_blueChannel,"cornerContourLimeTest.CornerContourLime","blueChannel",0xa11224b3,"cornerContourLimeTest.CornerContourLime.blueChannel","cornerContourLimeTest/CornerContourLime.hx",200,0xebb8ff67)
namespace cornerContourLimeTest{

void CornerContourLime_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9b600db2fdcf3f7f_37_new)
HXLINE( 327)		this->bird_d = HX_("M210.333,65.331C104.367,66.105-12.349,150.637,1.056,276.449c4.303,40.393,18.533,63.704,52.171,79.03c36.307,16.544,57.022,54.556,50.406,112.954c-9.935,4.88-17.405,11.031-19.132,20.015c7.531-0.17,14.943-0.312,22.59,4.341c20.333,12.375,31.296,27.363,42.979,51.72c1.714,3.572,8.192,2.849,8.312-3.078c0.17-8.467-1.856-17.454-5.226-26.933c-2.955-8.313,3.059-7.985,6.917-6.106c6.399,3.115,16.334,9.43,30.39,13.098c5.392,1.407,5.995-3.877,5.224-6.991c-1.864-7.522-11.009-10.862-24.519-19.229c-4.82-2.984-0.927-9.736,5.168-8.351l20.234,2.415c3.359,0.763,4.555-6.114,0.882-7.875c-14.198-6.804-28.897-10.098-53.864-7.799c-11.617-29.265-29.811-61.617-15.674-81.681c12.639-17.938,31.216-20.74,39.147,43.489c-5.002,3.107-11.215,5.031-11.332,13.024c7.201-2.845,11.207-1.399,14.791,0c17.912,6.998,35.462,21.826,52.982,37.309c3.739,3.303,8.413-1.718,6.991-6.034c-2.138-6.494-8.053-10.659-14.791-20.016c-3.239-4.495,5.03-7.045,10.886-6.876c13.849,0.396,22.886,8.268,35.177,11.218c4.483,1.076,9.741-1.964,6.917-6.917c-3.472-6.085-13.015-9.124-19.18-13.413c-4.357-3.029-3.025-7.132,2.697-6.602c3.905,0.361,8.478,2.271,13.908,1.767c9.946-0.925,7.717-7.169-0.883-9.566c-19.036-5.304-39.891-6.311-61.665-5.225c-43.837-8.358-31.554-84.887,0-90.363c29.571-5.132,62.966-13.339,99.928-32.156c32.668-5.429,64.835-12.446,92.939-33.85c48.106-14.469,111.903,16.113,204.241,149.695c3.926,5.681,15.819,9.94,9.524-6.351c-15.893-41.125-68.176-93.328-92.13-132.085c-24.581-39.774-14.34-61.243-39.957-91.247c-21.326-24.978-47.502-25.803-77.339-17.365c-23.461,6.634-39.234-7.117-52.98-31.273C318.42,87.525,265.838,64.927,210.333,65.331zM445.731,203.01c6.12,0,11.112,4.919,11.112,11.038c0,6.119-4.994,11.111-11.112,11.111s-11.038-4.994-11.038-11.111C434.693,207.929,439.613,203.01,445.731,203.01z",77,4c,e1,6a);
HXLINE( 323)		this->arc7_3 = HX_("M 100 200 A 100 50 -45 1 1 250 150",62,fe,ca,1e);
HXLINE( 322)		this->arc7_2 = HX_("M 100 200 A 100 50 -45 1 0 250 150",61,95,d9,4b);
HXLINE( 321)		this->arc7_1 = HX_("M 100 200 A 100 50 -45 0 1 250 150",21,93,ec,9d);
HXLINE( 320)		this->arc7_0 = HX_("M 100 200 A 100 50 -45 0 0 250 150",20,2a,fb,ca);
HXLINE( 319)		this->arc6_3 = HX_("M 100 200 A 100 50 -45 1 0 250 150",61,95,d9,4b);
HXLINE( 318)		this->arc6_2 = HX_("M 100 200 A 100 50 -45 1 1 250 150",62,fe,ca,1e);
HXLINE( 317)		this->arc6_1 = HX_("M 100 200 A 100 50 -45 0 1 250 150",21,93,ec,9d);
HXLINE( 316)		this->arc6_0 = HX_("M 100 200 A 100 50 -45 0 0 250 150",20,2a,fb,ca);
HXLINE( 315)		this->arc5_3 = HX_("M 100 200 A 100 50 -44 0 1 250 150",a0,15,2c,58);
HXLINE( 314)		this->arc5_2 = HX_("M 100 200 A 100 50 -44 1 0 250 150",e0,17,19,06);
HXLINE( 313)		this->arc5_1 = HX_("M 100 200 A 100 50 -44 1 1 250 150",e1,80,0a,d9);
HXLINE( 312)		this->arc5_0 = HX_("M 100 200 A 100 50 -44 0 0 250 150",9f,ac,3a,85);
HXLINE( 311)		this->arc4_3 = HX_("M 100 200 A 100 50 -44 0 0 250 150",9f,ac,3a,85);
HXLINE( 310)		this->arc4_2 = HX_("M 100 200 A 100 50 -44 1 1 250 150",e1,80,0a,d9);
HXLINE( 309)		this->arc4_1 = HX_("M 100 200 A 100 50 -44 0 1 250 150",a0,15,2c,58);
HXLINE( 308)		this->arc4_0 = HX_("M 100 200 A 100 50 -44 1 0 250 150",e0,17,19,06);
HXLINE( 307)		this->arc3_3 = HX_("M 100 200 A 100 50 -15 1 1 250 150",45,04,c3,d6);
HXLINE( 306)		this->arc3_2 = HX_("M 100 200 A 100 50 -15 1 0 250 150",44,9b,d1,03);
HXLINE( 305)		this->arc3_1 = HX_("M 100 200 A 100 50 -15 0 1 250 150",04,99,e4,55);
HXLINE( 304)		this->arc3_0 = HX_("M 100 200 A 100 50 -15 0 0 250 150",03,30,f3,82);
HXLINE( 303)		this->arc2_3 = HX_("M 100 200 A 100 50 -15 1 0 250 150",44,9b,d1,03);
HXLINE( 302)		this->arc2_2 = HX_("M 100 200 A 100 50 -15 1 1 250 150",45,04,c3,d6);
HXLINE( 301)		this->arc2_1 = HX_("M 100 200 A 100 50 -15 0 1 250 150",04,99,e4,55);
HXLINE( 300)		this->arc2_0 = HX_("M 100 200 A 100 50 -15 0 0 250 150",03,30,f3,82);
HXLINE( 299)		this->arc1_3 = HX_("M 100 200 A 100 50 0.0 0 1 250 150",a5,0a,0d,70);
HXLINE( 298)		this->arc1_2 = HX_("M 100 200 A 100 50 0.0 1 1 250 150",e6,75,eb,f0);
HXLINE( 297)		this->arc1_1 = HX_("M 100 200 A 100 50 0.0 1 0 250 150",e5,0c,fa,1d);
HXLINE( 296)		this->arc1_0 = HX_("M 100 200 A 100 50 0.0 0 0 250 150",a4,a1,1b,9d);
HXLINE( 295)		this->arc0_3 = HX_("M 100 200 A 100 50 0.0 0 0 250 150",a4,a1,1b,9d);
HXLINE( 294)		this->arc0_2 = HX_("M 100 200 A 100 50 0.0 1 1 250 150",e6,75,eb,f0);
HXLINE( 293)		this->arc0_1 = HX_("M 100 200 A 100 50 0.0 1 0 250 150",e5,0c,fa,1d);
HXLINE( 292)		this->arc0_0 = HX_("M 100 200 A 100 50 0.0 0 1 250 150",a5,0a,0d,70);
HXLINE( 291)		this->lightGray = -2894893;
HXLINE( 290)		this->gainsboro = -2302756;
HXLINE( 289)		this->silver = -4144960;
HXLINE( 288)		this->crimson = -2354116;
HXLINE(  59)		this->runSeconds = ((Float)0);
HXLINE(  58)		this->ready = false;
HXLINE(  47)		this->cubictest_d = HX_("M100,200 C100,100 250,100 250,200S400,300 400,200",b0,60,65,bc);
HXLINE(  46)		this->quadtest_d = HX_("M200,300 Q400,50 600,300 T1000,300",c7,a8,bf,30);
HXLINE(  44)		this->vertexColor = HX_("vertexColor",5f,3b,98,5e);
HXLINE(  43)		this->vertexPosition = HX_("vertexPosition",2d,3c,14,50);
HXLINE(  65)		super::__construct();
            	}

Dynamic CornerContourLime_obj::__CreateEmpty() { return new CornerContourLime_obj; }

void *CornerContourLime_obj::_hx_vtable = 0;

Dynamic CornerContourLime_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CornerContourLime_obj > _hx_result = new CornerContourLime_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CornerContourLime_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x431bf104) {
		if (inClassId<=(int)0x2bf009ee) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2bf009ee;
		} else {
			return inClassId==(int)0x431bf104;
		}
	} else {
		return inClassId==(int)0x7f8386d8;
	}
}

void CornerContourLime_obj::onWindowCreate(){
            	HX_STACKFRAME(&_hx_pos_9b600db2fdcf3f7f_73_onWindowCreate)
HXLINE(  74)		 ::lime::graphics::RenderContext context = this->_hx___window->context;
HXLINE(  76)		this->width = this->_hx___window->_hx___width;
HXLINE(  77)		this->height = this->_hx___window->_hx___height;
HXLINE(  78)		::String _hx_switch_0 = context->type;
            		if (  (_hx_switch_0==HX_("cairo",88,30,19,41)) ||  (_hx_switch_0==HX_("canvas",d8,54,42,b8)) ||  (_hx_switch_0==HX_("custom",b1,87,92,3f)) ||  (_hx_switch_0==HX_("dom",82,42,4c,00)) ||  (_hx_switch_0==HX_("flash",b0,35,8c,02)) ){
HXLINE(  91)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("opengl",6f,64,94,21)) ||  (_hx_switch_0==HX_("opengles",9d,f6,c9,fa)) ||  (_hx_switch_0==HX_("webgl",b9,4b,bc,c7)) ){
HXLINE(  80)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->webgl;
HXLINE(  81)			 ::lime::graphics::opengl::GLObject program = gl->createProgram();
HXDLIN(  81)			{
HXLINE(  81)				 ::lime::graphics::opengl::GLObject shader = gl->createShader(gl->VERTEX_SHADER);
HXDLIN(  81)				gl->shaderSource(shader,((((((HX_("attribute vec2 vertexPosition;",30,55,0d,f6) + HX_("attribute vec4 vertexColor;",b8,a7,4a,43)) + HX_("varying vec4 vcol;",61,c8,5b,03)) + HX_("void main(void) {",4d,18,fb,21)) + HX_(" gl_Position = vec4(vertexPosition, .0, 1.0);",a6,6c,c4,ec)) + HX_(" vcol = vertexColor;",75,ef,b6,2e)) + HX_("}",7d,00,00,00)));
HXDLIN(  81)				gl->compileShader(shader);
HXDLIN(  81)				 ::lime::graphics::opengl::GLObject shader1;
HXDLIN(  81)				if (!(( (bool)(gl->getShaderParameter(shader,gl->COMPILE_STATUS)) ))) {
HXLINE(  81)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Error compiling shader. ",bf,50,4d,23) + gl->getShaderInfoLog(shader))));
            				}
            				else {
HXLINE(  81)					shader1 = shader;
            				}
HXDLIN(  81)				gl->attachShader(program,shader1);
            			}
HXDLIN(  81)			{
HXLINE(  81)				 ::lime::graphics::opengl::GLObject shader2 = gl->createShader(gl->FRAGMENT_SHADER);
HXDLIN(  81)				gl->shaderSource(shader2,((((HX_("varying vec4 vcol;",61,c8,5b,03) + HX_("void main(void) {",4d,18,fb,21)) + HX_("vec4 color = vec4(vcol.rgb, vcol.a );",10,28,b7,0d)) + HX_("gl_FragColor = color;",64,33,41,39)) + HX_("}",7d,00,00,00)));
HXDLIN(  81)				gl->compileShader(shader2);
HXDLIN(  81)				 ::lime::graphics::opengl::GLObject shader3;
HXDLIN(  81)				if (!(( (bool)(gl->getShaderParameter(shader2,gl->COMPILE_STATUS)) ))) {
HXLINE(  81)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Error compiling shader. ",bf,50,4d,23) + gl->getShaderInfoLog(shader2))));
            				}
            				else {
HXLINE(  81)					shader3 = shader2;
            				}
HXDLIN(  81)				gl->attachShader(program,shader3);
            			}
HXDLIN(  81)			gl->linkProgram(program);
HXDLIN(  81)			 ::lime::graphics::opengl::GLObject _hx_tmp;
HXDLIN(  81)			if (!(( (bool)(gl->getProgramParameter(program,gl->LINK_STATUS)) ))) {
HXLINE(  81)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Error linking program. ",46,e8,c7,f8) + gl->getProgramInfoLog(program))));
            			}
            			else {
HXLINE(  81)				gl->validateProgram(program);
HXDLIN(  81)				if (!(( (bool)(gl->getProgramParameter(program,gl->VALIDATE_STATUS)) ))) {
HXLINE(  81)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Error validating program. ",21,2c,33,3d) + gl->getProgramInfoLog(program))));
            				}
            				else {
HXLINE(  81)					gl->useProgram(program);
HXDLIN(  81)					_hx_tmp = program;
            				}
            			}
HXDLIN(  81)			this->programColor = _hx_tmp;
HXLINE(  82)			this->drawContours();
HXLINE(  83)			this->rearrageDrawData();
HXLINE(  84)			{
HXLINE(  84)				 ::lime::graphics::opengl::GLObject buffer = null();
HXDLIN(  84)				gl->bindBuffer(gl->ARRAY_BUFFER,buffer);
            			}
HXLINE(  85)			gl->useProgram(this->programColor);
HXLINE(  86)			 ::lime::graphics::opengl::GLObject program1 = this->programColor;
HXDLIN(  86)			 ::haxe::io::ArrayBufferViewImpl data = this->arr32;
HXDLIN(  86)			::String xyName = this->vertexPosition;
HXDLIN(  86)			::String rgbaName = this->vertexColor;
HXDLIN(  86)			 ::Dynamic isDynamic = true;
HXLINE(  89)			if (::hx::IsNull( isDynamic )) {
HXLINE(  89)				isDynamic = false;
            			}
HXLINE(  86)			 ::Dynamic isDynamic1 = isDynamic;
HXDLIN(  86)			if (::hx::IsNull( isDynamic1 )) {
HXLINE(  86)				isDynamic1 = false;
            			}
HXDLIN(  86)			 ::lime::graphics::opengl::GLObject buf = gl->createBuffer();
HXDLIN(  86)			int staticDraw = gl->STATIC_DRAW;
HXDLIN(  86)			int dynamicDraw = gl->DYNAMIC_DRAW;
HXDLIN(  86)			int arrayBuffer = gl->ARRAY_BUFFER;
HXDLIN(  86)			gl->bindBuffer(arrayBuffer,buf);
HXDLIN(  86)			if (( (bool)(isDynamic1) )) {
HXLINE(  86)				int arrayBuffer = gl->ARRAY_BUFFER;
HXDLIN(  86)				::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::bufferData(gl,arrayBuffer,data,dynamicDraw);
            			}
            			else {
HXLINE(  86)				int arrayBuffer = gl->ARRAY_BUFFER;
HXDLIN(  86)				::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::bufferData(gl,arrayBuffer,data,staticDraw);
            			}
HXDLIN(  86)			 ::lime::graphics::opengl::GLObject vbo = buf;
HXDLIN(  86)			{
HXLINE(  86)				int inp = gl->getAttribLocation(program1,xyName);
HXDLIN(  86)				int elementBytes = 4;
HXDLIN(  86)				int fp = gl->FLOAT;
HXDLIN(  86)				int strideBytes = (6 * elementBytes);
HXDLIN(  86)				int offBytes = (0 * elementBytes);
HXDLIN(  86)				gl->vertexAttribPointer(inp,2,fp,false,strideBytes,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(offBytes));
HXDLIN(  86)				gl->enableVertexAttribArray(inp);
            			}
HXDLIN(  86)			{
HXLINE(  86)				int inp1 = gl->getAttribLocation(program1,rgbaName);
HXDLIN(  86)				int elementBytes1 = 4;
HXDLIN(  86)				int fp1 = gl->FLOAT;
HXDLIN(  86)				int strideBytes1 = (6 * elementBytes1);
HXDLIN(  86)				int offBytes1 = (2 * elementBytes1);
HXDLIN(  86)				gl->vertexAttribPointer(inp1,4,fp1,false,strideBytes1,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(offBytes1));
HXDLIN(  86)				gl->enableVertexAttribArray(inp1);
            			}
HXDLIN(  86)			this->bufColor = vbo;
HXLINE(  79)			goto _hx_goto_1;
            		}
            		_hx_goto_1:;
HXLINE(  94)		this->ready = true;
            	}


void CornerContourLime_obj::update(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_9b600db2fdcf3f7f_97_update)
HXLINE(  98)		this->runSeconds = (( (Float)(deltaTime) ) / ( (Float)(1000) ));
HXLINE(  99)		if (!(this->ready)) {
HXLINE(  99)			return;
            		}
            	}


void CornerContourLime_obj::render( ::lime::graphics::RenderContext context){
            	HX_STACKFRAME(&_hx_pos_9b600db2fdcf3f7f_102_render)
HXLINE( 103)		if (!(this->ready)) {
HXLINE( 103)			return;
            		}
HXLINE( 104)		::String _hx_switch_0 = context->type;
            		if (  (_hx_switch_0==HX_("cairo",88,30,19,41)) ||  (_hx_switch_0==HX_("canvas",d8,54,42,b8)) ||  (_hx_switch_0==HX_("custom",b1,87,92,3f)) ||  (_hx_switch_0==HX_("dom",82,42,4c,00)) ||  (_hx_switch_0==HX_("flash",b0,35,8c,02)) ){
HXLINE( 112)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("opengl",6f,64,94,21)) ||  (_hx_switch_0==HX_("opengles",9d,f6,c9,fa)) ||  (_hx_switch_0==HX_("webgl",b9,4b,bc,c7)) ){
HXLINE( 106)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->webgl;
HXLINE( 107)			{
HXLINE( 107)				gl->viewport(0,0,this->width,this->height);
HXDLIN( 107)				gl->clearColor(((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN( 107)				gl->clear(gl->COLOR_BUFFER_BIT);
            			}
HXLINE( 108)			gl->bindBuffer(gl->ARRAY_BUFFER,this->bufColor);
HXLINE( 109)			gl->useProgram(this->programColor);
HXLINE( 110)			gl->drawArrays(gl->TRIANGLES,0,this->bufferLength);
HXLINE( 105)			goto _hx_goto_4;
            		}
            		_hx_goto_4:;
            	}


void CornerContourLime_obj::drawContours(){
            	HX_GC_STACKFRAME(&_hx_pos_9b600db2fdcf3f7f_117_drawContours)
HXLINE( 118)		::haxe::Log_obj::trace(HX_("drawContours",7d,01,b9,0b),::hx::SourceInfo(HX_("src/cornerContourLimeTest/CornerContourLime.hx",f2,77,0c,74),118,HX_("cornerContourLimeTest.CornerContourLime",d8,c0,b3,4f),HX_("drawContours",7d,01,b9,0b)));
HXLINE( 119)		this->pen2D =  ::cornerContour::Pen2D_obj::__alloc( HX_CTX ,-16776961);
HXLINE( 120)		this->arcSVG();
HXLINE( 121)		this->pen2D->currentColor = -16776961;
HXLINE( 122)		this->birdSVG();
HXLINE( 123)		this->cubicSVG();
HXLINE( 124)		this->quadSVG();
            	}


HX_DEFINE_DYNAMIC_FUNC0(CornerContourLime_obj,drawContours,(void))

void CornerContourLime_obj::rearrageDrawData(){
            	HX_GC_STACKFRAME(&_hx_pos_9b600db2fdcf3f7f_127_rearrageDrawData)
HXLINE( 128)		::haxe::Log_obj::trace(HX_("rearrangeDrawData",47,4d,a0,2b),::hx::SourceInfo(HX_("src/cornerContourLimeTest/CornerContourLime.hx",f2,77,0c,74),128,HX_("cornerContourLimeTest.CornerContourLime",d8,c0,b3,4f),HX_("rearrageDrawData",5f,aa,55,31)));
HXLINE( 129)		 ::cornerContour::Pen2D pen = this->pen2D;
HXLINE( 130)		::Array< Float > data = pen->arr;
HXLINE( 131)		Float red = ((Float)0.);
HXLINE( 132)		Float green = ((Float)0.);
HXLINE( 133)		Float blue = ((Float)0.);
HXLINE( 134)		Float alpha = ((Float)0.);
HXLINE( 135)		int color = 0;
HXLINE( 137)		this->totalTriangles = ::Std_obj::_hx_int((( (Float)((data->length - 1)) ) / ( (Float)(7) )));
HXLINE( 138)		this->bufferLength = (this->totalTriangles * 3);
HXLINE( 140)		this->len = ::Std_obj::_hx_int(( (Float)(((this->totalTriangles * 6) * 3)) ));
HXLINE( 141)		int j = 0;
HXLINE( 142)		int size = (this->len * 4);
HXDLIN( 142)		 ::haxe::io::ArrayBufferViewImpl this1 =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 142)		 ::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN( 142)		this->arr32 = this2;
HXLINE( 143)		{
HXLINE( 143)			int _g = 0;
HXDLIN( 143)			int _g1 = this->totalTriangles;
HXDLIN( 143)			while((_g < _g1)){
HXLINE( 143)				_g = (_g + 1);
HXDLIN( 143)				int i = (_g - 1);
HXLINE( 144)				pen->arr[0] = ( (Float)(i) );
HXLINE( 145)				color = ::Std_obj::_hx_int(::cornerContour::io::_Array2DTriangles::Array2DTriangles_Impl__obj::get_color(data));
HXLINE( 146)				alpha = (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ));
HXLINE( 147)				red = (( (Float)(((color >> 16) & 255)) ) / ( (Float)(255) ));
HXLINE( 148)				green = (( (Float)(((color >> 8) & 255)) ) / ( (Float)(255) ));
HXLINE( 149)				blue = (( (Float)((color & 255)) ) / ( (Float)(255) ));
HXLINE( 151)				{
HXLINE( 151)					 ::haxe::io::ArrayBufferViewImpl this1 = this->arr32;
HXDLIN( 151)					Float value = (( (Float)(2) ) * ::cornerContour::io::_Array2DTriangles::Array2DTriangles_Impl__obj::get_ax(data));
HXDLIN( 151)					Float value1 = -((( (Float)(1) ) - (value / ( (Float)(this->width) ))));
HXDLIN( 151)					bool _hx_tmp;
HXDLIN( 151)					if ((j >= 0)) {
HXLINE( 151)						_hx_tmp = (j < (this1->byteLength >> 2));
            					}
            					else {
HXLINE( 151)						_hx_tmp = false;
            					}
HXDLIN( 151)					if (_hx_tmp) {
HXLINE( 151)						this1->bytes->setFloat(((j << 2) + this1->byteOffset),value1);
            					}
            				}
HXLINE( 152)				j = (j + 1);
HXLINE( 153)				{
HXLINE( 153)					 ::haxe::io::ArrayBufferViewImpl this2 = this->arr32;
HXDLIN( 153)					Float value2 = (( (Float)(2) ) * ::cornerContour::io::_Array2DTriangles::Array2DTriangles_Impl__obj::get_ay(data));
HXDLIN( 153)					Float value3 = (( (Float)(1) ) - (value2 / ( (Float)(this->height) )));
HXDLIN( 153)					bool _hx_tmp1;
HXDLIN( 153)					if ((j >= 0)) {
HXLINE( 153)						_hx_tmp1 = (j < (this2->byteLength >> 2));
            					}
            					else {
HXLINE( 153)						_hx_tmp1 = false;
            					}
HXDLIN( 153)					if (_hx_tmp1) {
HXLINE( 153)						this2->bytes->setFloat(((j << 2) + this2->byteOffset),value3);
            					}
            				}
HXLINE( 154)				j = (j + 1);
HXLINE( 155)				{
HXLINE( 155)					 ::haxe::io::ArrayBufferViewImpl this3 = this->arr32;
HXDLIN( 155)					bool _hx_tmp2;
HXDLIN( 155)					if ((j >= 0)) {
HXLINE( 155)						_hx_tmp2 = (j < (this3->byteLength >> 2));
            					}
            					else {
HXLINE( 155)						_hx_tmp2 = false;
            					}
HXDLIN( 155)					if (_hx_tmp2) {
HXLINE( 155)						this3->bytes->setFloat(((j << 2) + this3->byteOffset),red);
            					}
            				}
HXLINE( 156)				j = (j + 1);
HXLINE( 157)				{
HXLINE( 157)					 ::haxe::io::ArrayBufferViewImpl this4 = this->arr32;
HXDLIN( 157)					bool _hx_tmp3;
HXDLIN( 157)					if ((j >= 0)) {
HXLINE( 157)						_hx_tmp3 = (j < (this4->byteLength >> 2));
            					}
            					else {
HXLINE( 157)						_hx_tmp3 = false;
            					}
HXDLIN( 157)					if (_hx_tmp3) {
HXLINE( 157)						this4->bytes->setFloat(((j << 2) + this4->byteOffset),green);
            					}
            				}
HXLINE( 158)				j = (j + 1);
HXLINE( 159)				{
HXLINE( 159)					 ::haxe::io::ArrayBufferViewImpl this5 = this->arr32;
HXDLIN( 159)					bool _hx_tmp4;
HXDLIN( 159)					if ((j >= 0)) {
HXLINE( 159)						_hx_tmp4 = (j < (this5->byteLength >> 2));
            					}
            					else {
HXLINE( 159)						_hx_tmp4 = false;
            					}
HXDLIN( 159)					if (_hx_tmp4) {
HXLINE( 159)						this5->bytes->setFloat(((j << 2) + this5->byteOffset),blue);
            					}
            				}
HXLINE( 160)				j = (j + 1);
HXLINE( 161)				{
HXLINE( 161)					 ::haxe::io::ArrayBufferViewImpl this6 = this->arr32;
HXDLIN( 161)					bool _hx_tmp5;
HXDLIN( 161)					if ((j >= 0)) {
HXLINE( 161)						_hx_tmp5 = (j < (this6->byteLength >> 2));
            					}
            					else {
HXLINE( 161)						_hx_tmp5 = false;
            					}
HXDLIN( 161)					if (_hx_tmp5) {
HXLINE( 161)						this6->bytes->setFloat(((j << 2) + this6->byteOffset),alpha);
            					}
            				}
HXLINE( 162)				j = (j + 1);
HXLINE( 163)				{
HXLINE( 163)					 ::haxe::io::ArrayBufferViewImpl this7 = this->arr32;
HXDLIN( 163)					Float value4 = (( (Float)(2) ) * ::cornerContour::io::_Array2DTriangles::Array2DTriangles_Impl__obj::get_bx(data));
HXDLIN( 163)					Float value5 = -((( (Float)(1) ) - (value4 / ( (Float)(this->width) ))));
HXDLIN( 163)					bool _hx_tmp6;
HXDLIN( 163)					if ((j >= 0)) {
HXLINE( 163)						_hx_tmp6 = (j < (this7->byteLength >> 2));
            					}
            					else {
HXLINE( 163)						_hx_tmp6 = false;
            					}
HXDLIN( 163)					if (_hx_tmp6) {
HXLINE( 163)						this7->bytes->setFloat(((j << 2) + this7->byteOffset),value5);
            					}
            				}
HXLINE( 164)				j = (j + 1);
HXLINE( 165)				{
HXLINE( 165)					 ::haxe::io::ArrayBufferViewImpl this8 = this->arr32;
HXDLIN( 165)					Float value6 = (( (Float)(2) ) * ::cornerContour::io::_Array2DTriangles::Array2DTriangles_Impl__obj::get_by(data));
HXDLIN( 165)					Float value7 = (( (Float)(1) ) - (value6 / ( (Float)(this->height) )));
HXDLIN( 165)					bool _hx_tmp7;
HXDLIN( 165)					if ((j >= 0)) {
HXLINE( 165)						_hx_tmp7 = (j < (this8->byteLength >> 2));
            					}
            					else {
HXLINE( 165)						_hx_tmp7 = false;
            					}
HXDLIN( 165)					if (_hx_tmp7) {
HXLINE( 165)						this8->bytes->setFloat(((j << 2) + this8->byteOffset),value7);
            					}
            				}
HXLINE( 166)				j = (j + 1);
HXLINE( 167)				{
HXLINE( 167)					 ::haxe::io::ArrayBufferViewImpl this9 = this->arr32;
HXDLIN( 167)					bool _hx_tmp8;
HXDLIN( 167)					if ((j >= 0)) {
HXLINE( 167)						_hx_tmp8 = (j < (this9->byteLength >> 2));
            					}
            					else {
HXLINE( 167)						_hx_tmp8 = false;
            					}
HXDLIN( 167)					if (_hx_tmp8) {
HXLINE( 167)						this9->bytes->setFloat(((j << 2) + this9->byteOffset),red);
            					}
            				}
HXLINE( 168)				j = (j + 1);
HXLINE( 169)				{
HXLINE( 169)					 ::haxe::io::ArrayBufferViewImpl this10 = this->arr32;
HXDLIN( 169)					bool _hx_tmp9;
HXDLIN( 169)					if ((j >= 0)) {
HXLINE( 169)						_hx_tmp9 = (j < (this10->byteLength >> 2));
            					}
            					else {
HXLINE( 169)						_hx_tmp9 = false;
            					}
HXDLIN( 169)					if (_hx_tmp9) {
HXLINE( 169)						this10->bytes->setFloat(((j << 2) + this10->byteOffset),green);
            					}
            				}
HXLINE( 170)				j = (j + 1);
HXLINE( 171)				{
HXLINE( 171)					 ::haxe::io::ArrayBufferViewImpl this11 = this->arr32;
HXDLIN( 171)					bool _hx_tmp10;
HXDLIN( 171)					if ((j >= 0)) {
HXLINE( 171)						_hx_tmp10 = (j < (this11->byteLength >> 2));
            					}
            					else {
HXLINE( 171)						_hx_tmp10 = false;
            					}
HXDLIN( 171)					if (_hx_tmp10) {
HXLINE( 171)						this11->bytes->setFloat(((j << 2) + this11->byteOffset),blue);
            					}
            				}
HXLINE( 172)				j = (j + 1);
HXLINE( 173)				{
HXLINE( 173)					 ::haxe::io::ArrayBufferViewImpl this12 = this->arr32;
HXDLIN( 173)					bool _hx_tmp11;
HXDLIN( 173)					if ((j >= 0)) {
HXLINE( 173)						_hx_tmp11 = (j < (this12->byteLength >> 2));
            					}
            					else {
HXLINE( 173)						_hx_tmp11 = false;
            					}
HXDLIN( 173)					if (_hx_tmp11) {
HXLINE( 173)						this12->bytes->setFloat(((j << 2) + this12->byteOffset),alpha);
            					}
            				}
HXLINE( 174)				j = (j + 1);
HXLINE( 175)				{
HXLINE( 175)					 ::haxe::io::ArrayBufferViewImpl this13 = this->arr32;
HXDLIN( 175)					Float value8 = (( (Float)(2) ) * ::cornerContour::io::_Array2DTriangles::Array2DTriangles_Impl__obj::get_cx(data));
HXDLIN( 175)					Float value9 = -((( (Float)(1) ) - (value8 / ( (Float)(this->width) ))));
HXDLIN( 175)					bool _hx_tmp12;
HXDLIN( 175)					if ((j >= 0)) {
HXLINE( 175)						_hx_tmp12 = (j < (this13->byteLength >> 2));
            					}
            					else {
HXLINE( 175)						_hx_tmp12 = false;
            					}
HXDLIN( 175)					if (_hx_tmp12) {
HXLINE( 175)						this13->bytes->setFloat(((j << 2) + this13->byteOffset),value9);
            					}
            				}
HXLINE( 176)				j = (j + 1);
HXLINE( 177)				{
HXLINE( 177)					 ::haxe::io::ArrayBufferViewImpl this14 = this->arr32;
HXDLIN( 177)					Float value10 = (( (Float)(2) ) * ::cornerContour::io::_Array2DTriangles::Array2DTriangles_Impl__obj::get_cy(data));
HXDLIN( 177)					Float value11 = (( (Float)(1) ) - (value10 / ( (Float)(this->height) )));
HXDLIN( 177)					bool _hx_tmp13;
HXDLIN( 177)					if ((j >= 0)) {
HXLINE( 177)						_hx_tmp13 = (j < (this14->byteLength >> 2));
            					}
            					else {
HXLINE( 177)						_hx_tmp13 = false;
            					}
HXDLIN( 177)					if (_hx_tmp13) {
HXLINE( 177)						this14->bytes->setFloat(((j << 2) + this14->byteOffset),value11);
            					}
            				}
HXLINE( 178)				j = (j + 1);
HXLINE( 179)				{
HXLINE( 179)					 ::haxe::io::ArrayBufferViewImpl this15 = this->arr32;
HXDLIN( 179)					bool _hx_tmp14;
HXDLIN( 179)					if ((j >= 0)) {
HXLINE( 179)						_hx_tmp14 = (j < (this15->byteLength >> 2));
            					}
            					else {
HXLINE( 179)						_hx_tmp14 = false;
            					}
HXDLIN( 179)					if (_hx_tmp14) {
HXLINE( 179)						this15->bytes->setFloat(((j << 2) + this15->byteOffset),red);
            					}
            				}
HXLINE( 180)				j = (j + 1);
HXLINE( 181)				{
HXLINE( 181)					 ::haxe::io::ArrayBufferViewImpl this16 = this->arr32;
HXDLIN( 181)					bool _hx_tmp15;
HXDLIN( 181)					if ((j >= 0)) {
HXLINE( 181)						_hx_tmp15 = (j < (this16->byteLength >> 2));
            					}
            					else {
HXLINE( 181)						_hx_tmp15 = false;
            					}
HXDLIN( 181)					if (_hx_tmp15) {
HXLINE( 181)						this16->bytes->setFloat(((j << 2) + this16->byteOffset),green);
            					}
            				}
HXLINE( 182)				j = (j + 1);
HXLINE( 183)				{
HXLINE( 183)					 ::haxe::io::ArrayBufferViewImpl this17 = this->arr32;
HXDLIN( 183)					bool _hx_tmp16;
HXDLIN( 183)					if ((j >= 0)) {
HXLINE( 183)						_hx_tmp16 = (j < (this17->byteLength >> 2));
            					}
            					else {
HXLINE( 183)						_hx_tmp16 = false;
            					}
HXDLIN( 183)					if (_hx_tmp16) {
HXLINE( 183)						this17->bytes->setFloat(((j << 2) + this17->byteOffset),blue);
            					}
            				}
HXLINE( 184)				j = (j + 1);
HXLINE( 185)				{
HXLINE( 185)					 ::haxe::io::ArrayBufferViewImpl this18 = this->arr32;
HXDLIN( 185)					bool _hx_tmp17;
HXDLIN( 185)					if ((j >= 0)) {
HXLINE( 185)						_hx_tmp17 = (j < (this18->byteLength >> 2));
            					}
            					else {
HXLINE( 185)						_hx_tmp17 = false;
            					}
HXDLIN( 185)					if (_hx_tmp17) {
HXLINE( 185)						this18->bytes->setFloat(((j << 2) + this18->byteOffset),alpha);
            					}
            				}
HXLINE( 186)				j = (j + 1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CornerContourLime_obj,rearrageDrawData,(void))

Float CornerContourLime_obj::gx(Float v){
            	HX_STACKFRAME(&_hx_pos_9b600db2fdcf3f7f_203_gx)
HXDLIN( 203)		return -((( (Float)(1) ) - ((( (Float)(2) ) * v) / ( (Float)(this->width) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(CornerContourLime_obj,gx,return )

Float CornerContourLime_obj::gy(Float v){
            	HX_STACKFRAME(&_hx_pos_9b600db2fdcf3f7f_207_gy)
HXDLIN( 207)		return (( (Float)(1) ) - ((( (Float)(2) ) * v) / ( (Float)(this->height) )));
            	}


HX_DEFINE_DYNAMIC_FUNC1(CornerContourLime_obj,gy,return )

void CornerContourLime_obj::birdSVG(){
            	HX_GC_STACKFRAME(&_hx_pos_9b600db2fdcf3f7f_213_birdSVG)
HXLINE( 214)		 ::cornerContour::Sketcher sketcher =  ::cornerContour::Sketcher_obj::__alloc( HX_CTX ,this->pen2D,4,3);
HXLINE( 215)		sketcher->width = ( (Float)(2) );
HXLINE( 216)		 ::justPath::transform::ScaleTranslateContext scaleTranslateContext =  ::justPath::transform::ScaleTranslateContext_obj::__alloc( HX_CTX ,sketcher,( (Float)(20) ),( (Float)(0) ),( (Float)(1) ),( (Float)(1) ));
HXLINE( 217)		 ::justPath::SvgPath p =  ::justPath::SvgPath_obj::__alloc( HX_CTX ,scaleTranslateContext);
HXLINE( 218)		p->parse(this->bird_d);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CornerContourLime_obj,birdSVG,(void))

void CornerContourLime_obj::cubicSVG(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(5)
            		int _hx_run(int colour,Float x,Float y,Float x_,Float y_){
            			HX_GC_STACKFRAME(&_hx_pos_9b600db2fdcf3f7f_229_cubicSVG)
HXLINE( 229)			return ::Math_obj::round((( (Float)(colour) ) - (x * y)));
            		}
            		HX_END_LOCAL_FUNC5(return)

            	HX_GC_STACKFRAME(&_hx_pos_9b600db2fdcf3f7f_224_cubicSVG)
HXLINE( 225)		 ::cornerContour::Sketcher sketcher =  ::cornerContour::Sketcher_obj::__alloc( HX_CTX ,this->pen2D,4,3);
HXLINE( 226)		sketcher->width = ( (Float)(10) );
HXLINE( 228)		sketcher->colourFunction =  ::Dynamic(new _hx_Closure_0());
HXLINE( 231)		 ::justPath::transform::TranslationContext translateContext =  ::justPath::transform::TranslationContext_obj::__alloc( HX_CTX ,sketcher,( (Float)(50) ),( (Float)(200) ));
HXLINE( 232)		 ::justPath::SvgPath p =  ::justPath::SvgPath_obj::__alloc( HX_CTX ,translateContext);
HXLINE( 233)		p->parse(this->cubictest_d);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CornerContourLime_obj,cubicSVG,(void))

void CornerContourLime_obj::quadSVG(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(5)
            		Float _hx_run(Float width,Float x,Float y,Float x_,Float y_){
            			HX_GC_STACKFRAME(&_hx_pos_9b600db2fdcf3f7f_244_quadSVG)
HXLINE( 244)			return (width + ((Float)0.016));
            		}
            		HX_END_LOCAL_FUNC5(return)

            	HX_GC_STACKFRAME(&_hx_pos_9b600db2fdcf3f7f_239_quadSVG)
HXLINE( 240)		 ::cornerContour::Sketcher sketcher =  ::cornerContour::Sketcher_obj::__alloc( HX_CTX ,this->pen2D,4,3);
HXLINE( 241)		sketcher->width = ( (Float)(1) );
HXLINE( 243)		sketcher->widthFunction =  ::Dynamic(new _hx_Closure_0());
HXLINE( 246)		 ::justPath::transform::ScaleTranslateContext translateContext =  ::justPath::transform::ScaleTranslateContext_obj::__alloc( HX_CTX ,sketcher,( (Float)(0) ),( (Float)(100) ),((Float)0.5),((Float)0.5));
HXLINE( 247)		 ::justPath::SvgPath p =  ::justPath::SvgPath_obj::__alloc( HX_CTX ,translateContext);
HXLINE( 248)		p->parse(this->quadtest_d);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CornerContourLime_obj,quadSVG,(void))

void CornerContourLime_obj::arcSVG(){
            	HX_STACKFRAME(&_hx_pos_9b600db2fdcf3f7f_254_arcSVG)
HXLINE( 255)		::Array< ::String > arcs0 = ::Array_obj< ::String >::__new(4)->init(0,this->arc0_0)->init(1,this->arc0_1)->init(2,this->arc0_2)->init(3,this->arc0_3);
HXLINE( 256)		::Array< ::String > arcs1 = ::Array_obj< ::String >::__new(4)->init(0,this->arc1_0)->init(1,this->arc1_1)->init(2,this->arc1_2)->init(3,this->arc1_3);
HXLINE( 257)		::Array< ::String > arcs2 = ::Array_obj< ::String >::__new(4)->init(0,this->arc2_0)->init(1,this->arc2_1)->init(2,this->arc2_2)->init(3,this->arc2_3);
HXLINE( 258)		::Array< ::String > arcs3 = ::Array_obj< ::String >::__new(4)->init(0,this->arc3_0)->init(1,this->arc3_1)->init(2,this->arc3_2)->init(3,this->arc3_3);
HXLINE( 259)		::Array< ::String > arcs4 = ::Array_obj< ::String >::__new(4)->init(0,this->arc4_0)->init(1,this->arc4_1)->init(2,this->arc4_2)->init(3,this->arc4_3);
HXLINE( 260)		::Array< ::String > arcs5 = ::Array_obj< ::String >::__new(4)->init(0,this->arc5_0)->init(1,this->arc5_1)->init(2,this->arc5_2)->init(3,this->arc5_3);
HXLINE( 261)		::Array< ::String > arcs6 = ::Array_obj< ::String >::__new(4)->init(0,this->arc6_0)->init(1,this->arc6_1)->init(2,this->arc6_2)->init(3,this->arc6_3);
HXLINE( 262)		::Array< ::String > arcs7 = ::Array_obj< ::String >::__new(4)->init(0,this->arc7_0)->init(1,this->arc7_1)->init(2,this->arc7_2)->init(3,this->arc7_3);
HXLINE( 263)		::Array< int > pallet = ::Array_obj< int >::__new(4)->init(0,this->silver)->init(1,this->gainsboro)->init(2,this->lightGray)->init(3,this->crimson);
HXLINE( 264)		int x0 = 130;
HXLINE( 265)		int x1 = 450;
HXLINE( 266)		::Array< int > yPos = ::Array_obj< int >::fromData( _hx_array_data_4fb3c0d8_18,4);
HXLINE( 267)		::Array< ::Dynamic> arcs = ::Array_obj< ::Dynamic>::__new(8)->init(0,arcs0)->init(1,arcs1)->init(2,arcs2)->init(3,arcs3)->init(4,arcs4)->init(5,arcs5)->init(6,arcs6)->init(7,arcs7);
HXLINE( 268)		{
HXLINE( 268)			int _g = 0;
HXDLIN( 268)			int _g1 = yPos->length;
HXDLIN( 268)			while((_g < _g1)){
HXLINE( 268)				_g = (_g + 1);
HXDLIN( 268)				int i = (_g - 1);
HXLINE( 269)				::Array< ::String > _hx_tmp = ( (::Array< ::String >)(arcs->shift()) );
HXDLIN( 269)				this->drawSet(_hx_tmp,pallet,( (Float)(x0) ),( (Float)(yPos->__get(i)) ),((Float)0.5));
HXLINE( 270)				::Array< ::String > _hx_tmp1 = ( (::Array< ::String >)(arcs->shift()) );
HXDLIN( 270)				this->drawSet(_hx_tmp1,pallet,( (Float)(x1) ),( (Float)(yPos->__get(i)) ),((Float)0.5));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CornerContourLime_obj,arcSVG,(void))

void CornerContourLime_obj::drawSet(::Array< ::String > arcs,::Array< int > col,Float x,Float y,Float s){
            	HX_STACKFRAME(&_hx_pos_9b600db2fdcf3f7f_275_drawSet)
HXDLIN( 275)		int _g = 0;
HXDLIN( 275)		int _g1 = arcs->length;
HXDLIN( 275)		while((_g < _g1)){
HXDLIN( 275)			_g = (_g + 1);
HXDLIN( 275)			int i = (_g - 1);
HXDLIN( 275)			this->draw_d(arcs->__get(i),x,y,s,((Float)1.),col->__get(i));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(CornerContourLime_obj,drawSet,(void))

void CornerContourLime_obj::draw_d(::String d,Float x,Float y,Float s,Float w,int color){
            	HX_GC_STACKFRAME(&_hx_pos_9b600db2fdcf3f7f_278_draw_d)
HXLINE( 279)		this->pen2D->currentColor = color;
HXLINE( 280)		 ::cornerContour::Sketcher sketcher =  ::cornerContour::Sketcher_obj::__alloc( HX_CTX ,this->pen2D,4,3);
HXLINE( 281)		sketcher->width = w;
HXLINE( 282)		 ::justPath::transform::ScaleTranslateContext trans =  ::justPath::transform::ScaleTranslateContext_obj::__alloc( HX_CTX ,sketcher,x,y,s,s);
HXLINE( 283)		 ::justPath::SvgPath p =  ::justPath::SvgPath_obj::__alloc( HX_CTX ,trans);
HXLINE( 284)		p->parse(d);
            	}


HX_DEFINE_DYNAMIC_FUNC6(CornerContourLime_obj,draw_d,(void))

Float CornerContourLime_obj::alphaChannel(int _hx_int){
            	HX_STACKFRAME(&_hx_pos_9b600db2fdcf3f7f_191_alphaChannel)
HXDLIN( 191)		return (( (Float)(((_hx_int >> 24) & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CornerContourLime_obj,alphaChannel,return )

Float CornerContourLime_obj::redChannel(int _hx_int){
            	HX_STACKFRAME(&_hx_pos_9b600db2fdcf3f7f_194_redChannel)
HXDLIN( 194)		return (( (Float)(((_hx_int >> 16) & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CornerContourLime_obj,redChannel,return )

Float CornerContourLime_obj::greenChannel(int _hx_int){
            	HX_STACKFRAME(&_hx_pos_9b600db2fdcf3f7f_197_greenChannel)
HXDLIN( 197)		return (( (Float)(((_hx_int >> 8) & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CornerContourLime_obj,greenChannel,return )

Float CornerContourLime_obj::blueChannel(int _hx_int){
            	HX_STACKFRAME(&_hx_pos_9b600db2fdcf3f7f_200_blueChannel)
HXDLIN( 200)		return (( (Float)((_hx_int & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CornerContourLime_obj,blueChannel,return )


::hx::ObjectPtr< CornerContourLime_obj > CornerContourLime_obj::__new() {
	::hx::ObjectPtr< CornerContourLime_obj > __this = new CornerContourLime_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< CornerContourLime_obj > CornerContourLime_obj::__alloc(::hx::Ctx *_hx_ctx) {
	CornerContourLime_obj *__this = (CornerContourLime_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CornerContourLime_obj), true, "cornerContourLimeTest.CornerContourLime"));
	*(void **)__this = CornerContourLime_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CornerContourLime_obj::CornerContourLime_obj()
{
}

void CornerContourLime_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CornerContourLime);
	HX_MARK_MEMBER_NAME(sketcher,"sketcher");
	HX_MARK_MEMBER_NAME(pen2D,"pen2D");
	HX_MARK_MEMBER_NAME(vertexPosition,"vertexPosition");
	HX_MARK_MEMBER_NAME(vertexColor,"vertexColor");
	HX_MARK_MEMBER_NAME(quadtest_d,"quadtest_d");
	HX_MARK_MEMBER_NAME(cubictest_d,"cubictest_d");
	HX_MARK_MEMBER_NAME(programColor,"programColor");
	HX_MARK_MEMBER_NAME(bufColor,"bufColor");
	HX_MARK_MEMBER_NAME(arr32,"arr32");
	HX_MARK_MEMBER_NAME(len,"len");
	HX_MARK_MEMBER_NAME(totalTriangles,"totalTriangles");
	HX_MARK_MEMBER_NAME(bufferLength,"bufferLength");
	HX_MARK_MEMBER_NAME(ready,"ready");
	HX_MARK_MEMBER_NAME(runSeconds,"runSeconds");
	HX_MARK_MEMBER_NAME(program,"program");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(crimson,"crimson");
	HX_MARK_MEMBER_NAME(silver,"silver");
	HX_MARK_MEMBER_NAME(gainsboro,"gainsboro");
	HX_MARK_MEMBER_NAME(lightGray,"lightGray");
	HX_MARK_MEMBER_NAME(arc0_0,"arc0_0");
	HX_MARK_MEMBER_NAME(arc0_1,"arc0_1");
	HX_MARK_MEMBER_NAME(arc0_2,"arc0_2");
	HX_MARK_MEMBER_NAME(arc0_3,"arc0_3");
	HX_MARK_MEMBER_NAME(arc1_0,"arc1_0");
	HX_MARK_MEMBER_NAME(arc1_1,"arc1_1");
	HX_MARK_MEMBER_NAME(arc1_2,"arc1_2");
	HX_MARK_MEMBER_NAME(arc1_3,"arc1_3");
	HX_MARK_MEMBER_NAME(arc2_0,"arc2_0");
	HX_MARK_MEMBER_NAME(arc2_1,"arc2_1");
	HX_MARK_MEMBER_NAME(arc2_2,"arc2_2");
	HX_MARK_MEMBER_NAME(arc2_3,"arc2_3");
	HX_MARK_MEMBER_NAME(arc3_0,"arc3_0");
	HX_MARK_MEMBER_NAME(arc3_1,"arc3_1");
	HX_MARK_MEMBER_NAME(arc3_2,"arc3_2");
	HX_MARK_MEMBER_NAME(arc3_3,"arc3_3");
	HX_MARK_MEMBER_NAME(arc4_0,"arc4_0");
	HX_MARK_MEMBER_NAME(arc4_1,"arc4_1");
	HX_MARK_MEMBER_NAME(arc4_2,"arc4_2");
	HX_MARK_MEMBER_NAME(arc4_3,"arc4_3");
	HX_MARK_MEMBER_NAME(arc5_0,"arc5_0");
	HX_MARK_MEMBER_NAME(arc5_1,"arc5_1");
	HX_MARK_MEMBER_NAME(arc5_2,"arc5_2");
	HX_MARK_MEMBER_NAME(arc5_3,"arc5_3");
	HX_MARK_MEMBER_NAME(arc6_0,"arc6_0");
	HX_MARK_MEMBER_NAME(arc6_1,"arc6_1");
	HX_MARK_MEMBER_NAME(arc6_2,"arc6_2");
	HX_MARK_MEMBER_NAME(arc6_3,"arc6_3");
	HX_MARK_MEMBER_NAME(arc7_0,"arc7_0");
	HX_MARK_MEMBER_NAME(arc7_1,"arc7_1");
	HX_MARK_MEMBER_NAME(arc7_2,"arc7_2");
	HX_MARK_MEMBER_NAME(arc7_3,"arc7_3");
	HX_MARK_MEMBER_NAME(bird_d,"bird_d");
	 ::lime::app::Application_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CornerContourLime_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(sketcher,"sketcher");
	HX_VISIT_MEMBER_NAME(pen2D,"pen2D");
	HX_VISIT_MEMBER_NAME(vertexPosition,"vertexPosition");
	HX_VISIT_MEMBER_NAME(vertexColor,"vertexColor");
	HX_VISIT_MEMBER_NAME(quadtest_d,"quadtest_d");
	HX_VISIT_MEMBER_NAME(cubictest_d,"cubictest_d");
	HX_VISIT_MEMBER_NAME(programColor,"programColor");
	HX_VISIT_MEMBER_NAME(bufColor,"bufColor");
	HX_VISIT_MEMBER_NAME(arr32,"arr32");
	HX_VISIT_MEMBER_NAME(len,"len");
	HX_VISIT_MEMBER_NAME(totalTriangles,"totalTriangles");
	HX_VISIT_MEMBER_NAME(bufferLength,"bufferLength");
	HX_VISIT_MEMBER_NAME(ready,"ready");
	HX_VISIT_MEMBER_NAME(runSeconds,"runSeconds");
	HX_VISIT_MEMBER_NAME(program,"program");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(crimson,"crimson");
	HX_VISIT_MEMBER_NAME(silver,"silver");
	HX_VISIT_MEMBER_NAME(gainsboro,"gainsboro");
	HX_VISIT_MEMBER_NAME(lightGray,"lightGray");
	HX_VISIT_MEMBER_NAME(arc0_0,"arc0_0");
	HX_VISIT_MEMBER_NAME(arc0_1,"arc0_1");
	HX_VISIT_MEMBER_NAME(arc0_2,"arc0_2");
	HX_VISIT_MEMBER_NAME(arc0_3,"arc0_3");
	HX_VISIT_MEMBER_NAME(arc1_0,"arc1_0");
	HX_VISIT_MEMBER_NAME(arc1_1,"arc1_1");
	HX_VISIT_MEMBER_NAME(arc1_2,"arc1_2");
	HX_VISIT_MEMBER_NAME(arc1_3,"arc1_3");
	HX_VISIT_MEMBER_NAME(arc2_0,"arc2_0");
	HX_VISIT_MEMBER_NAME(arc2_1,"arc2_1");
	HX_VISIT_MEMBER_NAME(arc2_2,"arc2_2");
	HX_VISIT_MEMBER_NAME(arc2_3,"arc2_3");
	HX_VISIT_MEMBER_NAME(arc3_0,"arc3_0");
	HX_VISIT_MEMBER_NAME(arc3_1,"arc3_1");
	HX_VISIT_MEMBER_NAME(arc3_2,"arc3_2");
	HX_VISIT_MEMBER_NAME(arc3_3,"arc3_3");
	HX_VISIT_MEMBER_NAME(arc4_0,"arc4_0");
	HX_VISIT_MEMBER_NAME(arc4_1,"arc4_1");
	HX_VISIT_MEMBER_NAME(arc4_2,"arc4_2");
	HX_VISIT_MEMBER_NAME(arc4_3,"arc4_3");
	HX_VISIT_MEMBER_NAME(arc5_0,"arc5_0");
	HX_VISIT_MEMBER_NAME(arc5_1,"arc5_1");
	HX_VISIT_MEMBER_NAME(arc5_2,"arc5_2");
	HX_VISIT_MEMBER_NAME(arc5_3,"arc5_3");
	HX_VISIT_MEMBER_NAME(arc6_0,"arc6_0");
	HX_VISIT_MEMBER_NAME(arc6_1,"arc6_1");
	HX_VISIT_MEMBER_NAME(arc6_2,"arc6_2");
	HX_VISIT_MEMBER_NAME(arc6_3,"arc6_3");
	HX_VISIT_MEMBER_NAME(arc7_0,"arc7_0");
	HX_VISIT_MEMBER_NAME(arc7_1,"arc7_1");
	HX_VISIT_MEMBER_NAME(arc7_2,"arc7_2");
	HX_VISIT_MEMBER_NAME(arc7_3,"arc7_3");
	HX_VISIT_MEMBER_NAME(bird_d,"bird_d");
	 ::lime::app::Application_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CornerContourLime_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gx") ) { return ::hx::Val( gx_dyn() ); }
		if (HX_FIELD_EQ(inName,"gy") ) { return ::hx::Val( gy_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"len") ) { return ::hx::Val( len ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pen2D") ) { return ::hx::Val( pen2D ); }
		if (HX_FIELD_EQ(inName,"arr32") ) { return ::hx::Val( arr32 ); }
		if (HX_FIELD_EQ(inName,"ready") ) { return ::hx::Val( ready ); }
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"arcSVG") ) { return ::hx::Val( arcSVG_dyn() ); }
		if (HX_FIELD_EQ(inName,"draw_d") ) { return ::hx::Val( draw_d_dyn() ); }
		if (HX_FIELD_EQ(inName,"silver") ) { return ::hx::Val( silver ); }
		if (HX_FIELD_EQ(inName,"arc0_0") ) { return ::hx::Val( arc0_0 ); }
		if (HX_FIELD_EQ(inName,"arc0_1") ) { return ::hx::Val( arc0_1 ); }
		if (HX_FIELD_EQ(inName,"arc0_2") ) { return ::hx::Val( arc0_2 ); }
		if (HX_FIELD_EQ(inName,"arc0_3") ) { return ::hx::Val( arc0_3 ); }
		if (HX_FIELD_EQ(inName,"arc1_0") ) { return ::hx::Val( arc1_0 ); }
		if (HX_FIELD_EQ(inName,"arc1_1") ) { return ::hx::Val( arc1_1 ); }
		if (HX_FIELD_EQ(inName,"arc1_2") ) { return ::hx::Val( arc1_2 ); }
		if (HX_FIELD_EQ(inName,"arc1_3") ) { return ::hx::Val( arc1_3 ); }
		if (HX_FIELD_EQ(inName,"arc2_0") ) { return ::hx::Val( arc2_0 ); }
		if (HX_FIELD_EQ(inName,"arc2_1") ) { return ::hx::Val( arc2_1 ); }
		if (HX_FIELD_EQ(inName,"arc2_2") ) { return ::hx::Val( arc2_2 ); }
		if (HX_FIELD_EQ(inName,"arc2_3") ) { return ::hx::Val( arc2_3 ); }
		if (HX_FIELD_EQ(inName,"arc3_0") ) { return ::hx::Val( arc3_0 ); }
		if (HX_FIELD_EQ(inName,"arc3_1") ) { return ::hx::Val( arc3_1 ); }
		if (HX_FIELD_EQ(inName,"arc3_2") ) { return ::hx::Val( arc3_2 ); }
		if (HX_FIELD_EQ(inName,"arc3_3") ) { return ::hx::Val( arc3_3 ); }
		if (HX_FIELD_EQ(inName,"arc4_0") ) { return ::hx::Val( arc4_0 ); }
		if (HX_FIELD_EQ(inName,"arc4_1") ) { return ::hx::Val( arc4_1 ); }
		if (HX_FIELD_EQ(inName,"arc4_2") ) { return ::hx::Val( arc4_2 ); }
		if (HX_FIELD_EQ(inName,"arc4_3") ) { return ::hx::Val( arc4_3 ); }
		if (HX_FIELD_EQ(inName,"arc5_0") ) { return ::hx::Val( arc5_0 ); }
		if (HX_FIELD_EQ(inName,"arc5_1") ) { return ::hx::Val( arc5_1 ); }
		if (HX_FIELD_EQ(inName,"arc5_2") ) { return ::hx::Val( arc5_2 ); }
		if (HX_FIELD_EQ(inName,"arc5_3") ) { return ::hx::Val( arc5_3 ); }
		if (HX_FIELD_EQ(inName,"arc6_0") ) { return ::hx::Val( arc6_0 ); }
		if (HX_FIELD_EQ(inName,"arc6_1") ) { return ::hx::Val( arc6_1 ); }
		if (HX_FIELD_EQ(inName,"arc6_2") ) { return ::hx::Val( arc6_2 ); }
		if (HX_FIELD_EQ(inName,"arc6_3") ) { return ::hx::Val( arc6_3 ); }
		if (HX_FIELD_EQ(inName,"arc7_0") ) { return ::hx::Val( arc7_0 ); }
		if (HX_FIELD_EQ(inName,"arc7_1") ) { return ::hx::Val( arc7_1 ); }
		if (HX_FIELD_EQ(inName,"arc7_2") ) { return ::hx::Val( arc7_2 ); }
		if (HX_FIELD_EQ(inName,"arc7_3") ) { return ::hx::Val( arc7_3 ); }
		if (HX_FIELD_EQ(inName,"bird_d") ) { return ::hx::Val( bird_d ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"program") ) { return ::hx::Val( program ); }
		if (HX_FIELD_EQ(inName,"birdSVG") ) { return ::hx::Val( birdSVG_dyn() ); }
		if (HX_FIELD_EQ(inName,"quadSVG") ) { return ::hx::Val( quadSVG_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawSet") ) { return ::hx::Val( drawSet_dyn() ); }
		if (HX_FIELD_EQ(inName,"crimson") ) { return ::hx::Val( crimson ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sketcher") ) { return ::hx::Val( sketcher ); }
		if (HX_FIELD_EQ(inName,"bufColor") ) { return ::hx::Val( bufColor ); }
		if (HX_FIELD_EQ(inName,"cubicSVG") ) { return ::hx::Val( cubicSVG_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"gainsboro") ) { return ::hx::Val( gainsboro ); }
		if (HX_FIELD_EQ(inName,"lightGray") ) { return ::hx::Val( lightGray ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"quadtest_d") ) { return ::hx::Val( quadtest_d ); }
		if (HX_FIELD_EQ(inName,"runSeconds") ) { return ::hx::Val( runSeconds ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"vertexColor") ) { return ::hx::Val( vertexColor ); }
		if (HX_FIELD_EQ(inName,"cubictest_d") ) { return ::hx::Val( cubictest_d ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"programColor") ) { return ::hx::Val( programColor ); }
		if (HX_FIELD_EQ(inName,"bufferLength") ) { return ::hx::Val( bufferLength ); }
		if (HX_FIELD_EQ(inName,"drawContours") ) { return ::hx::Val( drawContours_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"vertexPosition") ) { return ::hx::Val( vertexPosition ); }
		if (HX_FIELD_EQ(inName,"totalTriangles") ) { return ::hx::Val( totalTriangles ); }
		if (HX_FIELD_EQ(inName,"onWindowCreate") ) { return ::hx::Val( onWindowCreate_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rearrageDrawData") ) { return ::hx::Val( rearrageDrawData_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CornerContourLime_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"redChannel") ) { outValue = redChannel_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"blueChannel") ) { outValue = blueChannel_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"alphaChannel") ) { outValue = alphaChannel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greenChannel") ) { outValue = greenChannel_dyn(); return true; }
	}
	return false;
}

::hx::Val CornerContourLime_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"len") ) { len=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pen2D") ) { pen2D=inValue.Cast<  ::cornerContour::Pen2D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arr32") ) { arr32=inValue.Cast<  ::haxe::io::ArrayBufferViewImpl >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ready") ) { ready=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"silver") ) { silver=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc0_0") ) { arc0_0=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc0_1") ) { arc0_1=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc0_2") ) { arc0_2=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc0_3") ) { arc0_3=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc1_0") ) { arc1_0=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc1_1") ) { arc1_1=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc1_2") ) { arc1_2=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc1_3") ) { arc1_3=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc2_0") ) { arc2_0=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc2_1") ) { arc2_1=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc2_2") ) { arc2_2=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc2_3") ) { arc2_3=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc3_0") ) { arc3_0=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc3_1") ) { arc3_1=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc3_2") ) { arc3_2=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc3_3") ) { arc3_3=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc4_0") ) { arc4_0=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc4_1") ) { arc4_1=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc4_2") ) { arc4_2=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc4_3") ) { arc4_3=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc5_0") ) { arc5_0=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc5_1") ) { arc5_1=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc5_2") ) { arc5_2=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc5_3") ) { arc5_3=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc6_0") ) { arc6_0=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc6_1") ) { arc6_1=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc6_2") ) { arc6_2=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc6_3") ) { arc6_3=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc7_0") ) { arc7_0=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc7_1") ) { arc7_1=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc7_2") ) { arc7_2=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc7_3") ) { arc7_3=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bird_d") ) { bird_d=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"program") ) { program=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"crimson") ) { crimson=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sketcher") ) { sketcher=inValue.Cast<  ::cornerContour::Sketcher >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bufColor") ) { bufColor=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"gainsboro") ) { gainsboro=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lightGray") ) { lightGray=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"quadtest_d") ) { quadtest_d=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"runSeconds") ) { runSeconds=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"vertexColor") ) { vertexColor=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cubictest_d") ) { cubictest_d=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"programColor") ) { programColor=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bufferLength") ) { bufferLength=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"vertexPosition") ) { vertexPosition=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalTriangles") ) { totalTriangles=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CornerContourLime_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("sketcher",d9,04,68,81));
	outFields->push(HX_("pen2D",eb,28,f7,bf));
	outFields->push(HX_("vertexPosition",2d,3c,14,50));
	outFields->push(HX_("vertexColor",5f,3b,98,5e));
	outFields->push(HX_("quadtest_d",fe,db,ed,08));
	outFields->push(HX_("cubictest_d",c1,84,2e,d8));
	outFields->push(HX_("programColor",3f,f8,bf,12));
	outFields->push(HX_("bufColor",30,a5,8f,8c));
	outFields->push(HX_("arr32",40,45,8f,25));
	outFields->push(HX_("len",d5,4b,52,00));
	outFields->push(HX_("totalTriangles",47,24,83,54));
	outFields->push(HX_("bufferLength",06,86,dc,a3));
	outFields->push(HX_("ready",63,a0,ba,e6));
	outFields->push(HX_("runSeconds",74,46,0a,c5));
	outFields->push(HX_("program",84,4a,f9,f3));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("crimson",df,dd,f2,66));
	outFields->push(HX_("silver",0d,55,da,b7));
	outFields->push(HX_("gainsboro",de,1f,fe,0c));
	outFields->push(HX_("lightGray",d9,af,89,bd));
	outFields->push(HX_("arc0_0",0f,00,e1,ad));
	outFields->push(HX_("arc0_1",10,00,e1,ad));
	outFields->push(HX_("arc0_2",11,00,e1,ad));
	outFields->push(HX_("arc0_3",12,00,e1,ad));
	outFields->push(HX_("arc1_0",50,c2,e1,ad));
	outFields->push(HX_("arc1_1",51,c2,e1,ad));
	outFields->push(HX_("arc1_2",52,c2,e1,ad));
	outFields->push(HX_("arc1_3",53,c2,e1,ad));
	outFields->push(HX_("arc2_0",91,84,e2,ad));
	outFields->push(HX_("arc2_1",92,84,e2,ad));
	outFields->push(HX_("arc2_2",93,84,e2,ad));
	outFields->push(HX_("arc2_3",94,84,e2,ad));
	outFields->push(HX_("arc3_0",d2,46,e3,ad));
	outFields->push(HX_("arc3_1",d3,46,e3,ad));
	outFields->push(HX_("arc3_2",d4,46,e3,ad));
	outFields->push(HX_("arc3_3",d5,46,e3,ad));
	outFields->push(HX_("arc4_0",13,09,e4,ad));
	outFields->push(HX_("arc4_1",14,09,e4,ad));
	outFields->push(HX_("arc4_2",15,09,e4,ad));
	outFields->push(HX_("arc4_3",16,09,e4,ad));
	outFields->push(HX_("arc5_0",54,cb,e4,ad));
	outFields->push(HX_("arc5_1",55,cb,e4,ad));
	outFields->push(HX_("arc5_2",56,cb,e4,ad));
	outFields->push(HX_("arc5_3",57,cb,e4,ad));
	outFields->push(HX_("arc6_0",95,8d,e5,ad));
	outFields->push(HX_("arc6_1",96,8d,e5,ad));
	outFields->push(HX_("arc6_2",97,8d,e5,ad));
	outFields->push(HX_("arc6_3",98,8d,e5,ad));
	outFields->push(HX_("arc7_0",d6,4f,e6,ad));
	outFields->push(HX_("arc7_1",d7,4f,e6,ad));
	outFields->push(HX_("arc7_2",d8,4f,e6,ad));
	outFields->push(HX_("arc7_3",d9,4f,e6,ad));
	outFields->push(HX_("bird_d",9e,cc,b2,ef));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CornerContourLime_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::cornerContour::Sketcher */ ,(int)offsetof(CornerContourLime_obj,sketcher),HX_("sketcher",d9,04,68,81)},
	{::hx::fsObject /*  ::cornerContour::Pen2D */ ,(int)offsetof(CornerContourLime_obj,pen2D),HX_("pen2D",eb,28,f7,bf)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,vertexPosition),HX_("vertexPosition",2d,3c,14,50)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,vertexColor),HX_("vertexColor",5f,3b,98,5e)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,quadtest_d),HX_("quadtest_d",fe,db,ed,08)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,cubictest_d),HX_("cubictest_d",c1,84,2e,d8)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(CornerContourLime_obj,programColor),HX_("programColor",3f,f8,bf,12)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(CornerContourLime_obj,bufColor),HX_("bufColor",30,a5,8f,8c)},
	{::hx::fsObject /*  ::haxe::io::ArrayBufferViewImpl */ ,(int)offsetof(CornerContourLime_obj,arr32),HX_("arr32",40,45,8f,25)},
	{::hx::fsInt,(int)offsetof(CornerContourLime_obj,len),HX_("len",d5,4b,52,00)},
	{::hx::fsInt,(int)offsetof(CornerContourLime_obj,totalTriangles),HX_("totalTriangles",47,24,83,54)},
	{::hx::fsInt,(int)offsetof(CornerContourLime_obj,bufferLength),HX_("bufferLength",06,86,dc,a3)},
	{::hx::fsBool,(int)offsetof(CornerContourLime_obj,ready),HX_("ready",63,a0,ba,e6)},
	{::hx::fsFloat,(int)offsetof(CornerContourLime_obj,runSeconds),HX_("runSeconds",74,46,0a,c5)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(CornerContourLime_obj,program),HX_("program",84,4a,f9,f3)},
	{::hx::fsInt,(int)offsetof(CornerContourLime_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsInt,(int)offsetof(CornerContourLime_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsInt,(int)offsetof(CornerContourLime_obj,crimson),HX_("crimson",df,dd,f2,66)},
	{::hx::fsInt,(int)offsetof(CornerContourLime_obj,silver),HX_("silver",0d,55,da,b7)},
	{::hx::fsInt,(int)offsetof(CornerContourLime_obj,gainsboro),HX_("gainsboro",de,1f,fe,0c)},
	{::hx::fsInt,(int)offsetof(CornerContourLime_obj,lightGray),HX_("lightGray",d9,af,89,bd)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc0_0),HX_("arc0_0",0f,00,e1,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc0_1),HX_("arc0_1",10,00,e1,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc0_2),HX_("arc0_2",11,00,e1,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc0_3),HX_("arc0_3",12,00,e1,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc1_0),HX_("arc1_0",50,c2,e1,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc1_1),HX_("arc1_1",51,c2,e1,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc1_2),HX_("arc1_2",52,c2,e1,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc1_3),HX_("arc1_3",53,c2,e1,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc2_0),HX_("arc2_0",91,84,e2,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc2_1),HX_("arc2_1",92,84,e2,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc2_2),HX_("arc2_2",93,84,e2,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc2_3),HX_("arc2_3",94,84,e2,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc3_0),HX_("arc3_0",d2,46,e3,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc3_1),HX_("arc3_1",d3,46,e3,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc3_2),HX_("arc3_2",d4,46,e3,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc3_3),HX_("arc3_3",d5,46,e3,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc4_0),HX_("arc4_0",13,09,e4,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc4_1),HX_("arc4_1",14,09,e4,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc4_2),HX_("arc4_2",15,09,e4,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc4_3),HX_("arc4_3",16,09,e4,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc5_0),HX_("arc5_0",54,cb,e4,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc5_1),HX_("arc5_1",55,cb,e4,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc5_2),HX_("arc5_2",56,cb,e4,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc5_3),HX_("arc5_3",57,cb,e4,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc6_0),HX_("arc6_0",95,8d,e5,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc6_1),HX_("arc6_1",96,8d,e5,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc6_2),HX_("arc6_2",97,8d,e5,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc6_3),HX_("arc6_3",98,8d,e5,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc7_0),HX_("arc7_0",d6,4f,e6,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc7_1),HX_("arc7_1",d7,4f,e6,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc7_2),HX_("arc7_2",d8,4f,e6,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,arc7_3),HX_("arc7_3",d9,4f,e6,ad)},
	{::hx::fsString,(int)offsetof(CornerContourLime_obj,bird_d),HX_("bird_d",9e,cc,b2,ef)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CornerContourLime_obj_sStaticStorageInfo = 0;
#endif

static ::String CornerContourLime_obj_sMemberFields[] = {
	HX_("sketcher",d9,04,68,81),
	HX_("pen2D",eb,28,f7,bf),
	HX_("vertexPosition",2d,3c,14,50),
	HX_("vertexColor",5f,3b,98,5e),
	HX_("quadtest_d",fe,db,ed,08),
	HX_("cubictest_d",c1,84,2e,d8),
	HX_("programColor",3f,f8,bf,12),
	HX_("bufColor",30,a5,8f,8c),
	HX_("arr32",40,45,8f,25),
	HX_("len",d5,4b,52,00),
	HX_("totalTriangles",47,24,83,54),
	HX_("bufferLength",06,86,dc,a3),
	HX_("ready",63,a0,ba,e6),
	HX_("runSeconds",74,46,0a,c5),
	HX_("program",84,4a,f9,f3),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("onWindowCreate",cb,62,6f,6d),
	HX_("update",09,86,05,87),
	HX_("render",56,6b,29,05),
	HX_("drawContours",7d,01,b9,0b),
	HX_("rearrageDrawData",5f,aa,55,31),
	HX_("gx",31,5a,00,00),
	HX_("gy",32,5a,00,00),
	HX_("birdSVG",ab,16,b7,cc),
	HX_("cubicSVG",3a,13,8d,05),
	HX_("quadSVG",dd,83,f1,3e),
	HX_("arcSVG",32,87,fb,ad),
	HX_("drawSet",fe,81,d7,fb),
	HX_("draw_d",29,88,d6,df),
	HX_("crimson",df,dd,f2,66),
	HX_("silver",0d,55,da,b7),
	HX_("gainsboro",de,1f,fe,0c),
	HX_("lightGray",d9,af,89,bd),
	HX_("arc0_0",0f,00,e1,ad),
	HX_("arc0_1",10,00,e1,ad),
	HX_("arc0_2",11,00,e1,ad),
	HX_("arc0_3",12,00,e1,ad),
	HX_("arc1_0",50,c2,e1,ad),
	HX_("arc1_1",51,c2,e1,ad),
	HX_("arc1_2",52,c2,e1,ad),
	HX_("arc1_3",53,c2,e1,ad),
	HX_("arc2_0",91,84,e2,ad),
	HX_("arc2_1",92,84,e2,ad),
	HX_("arc2_2",93,84,e2,ad),
	HX_("arc2_3",94,84,e2,ad),
	HX_("arc3_0",d2,46,e3,ad),
	HX_("arc3_1",d3,46,e3,ad),
	HX_("arc3_2",d4,46,e3,ad),
	HX_("arc3_3",d5,46,e3,ad),
	HX_("arc4_0",13,09,e4,ad),
	HX_("arc4_1",14,09,e4,ad),
	HX_("arc4_2",15,09,e4,ad),
	HX_("arc4_3",16,09,e4,ad),
	HX_("arc5_0",54,cb,e4,ad),
	HX_("arc5_1",55,cb,e4,ad),
	HX_("arc5_2",56,cb,e4,ad),
	HX_("arc5_3",57,cb,e4,ad),
	HX_("arc6_0",95,8d,e5,ad),
	HX_("arc6_1",96,8d,e5,ad),
	HX_("arc6_2",97,8d,e5,ad),
	HX_("arc6_3",98,8d,e5,ad),
	HX_("arc7_0",d6,4f,e6,ad),
	HX_("arc7_1",d7,4f,e6,ad),
	HX_("arc7_2",d8,4f,e6,ad),
	HX_("arc7_3",d9,4f,e6,ad),
	HX_("bird_d",9e,cc,b2,ef),
	::String(null()) };

::hx::Class CornerContourLime_obj::__mClass;

static ::String CornerContourLime_obj_sStaticFields[] = {
	HX_("alphaChannel",05,49,45,60),
	HX_("redChannel",72,8b,3f,cc),
	HX_("greenChannel",40,c8,80,1b),
	HX_("blueChannel",49,cd,ee,07),
	::String(null())
};

void CornerContourLime_obj::__register()
{
	CornerContourLime_obj _hx_dummy;
	CornerContourLime_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("cornerContourLimeTest.CornerContourLime",d8,c0,b3,4f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CornerContourLime_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CornerContourLime_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CornerContourLime_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CornerContourLime_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CornerContourLime_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CornerContourLime_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace cornerContourLimeTest
