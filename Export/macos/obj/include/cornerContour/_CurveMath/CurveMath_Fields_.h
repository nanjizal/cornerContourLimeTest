// Generated by Haxe 4.3.0-rc.1+5f599ba
#ifndef INCLUDED_cornerContour__CurveMath_CurveMath_Fields_
#define INCLUDED_cornerContour__CurveMath_CurveMath_Fields_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(cornerContour,_CurveMath,CurveMath_Fields_)

namespace cornerContour{
namespace _CurveMath{


class HXCPP_CLASS_ATTRIBUTES CurveMath_Fields__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef CurveMath_Fields__obj OBJ_;
		CurveMath_Fields__obj();

	public:
		enum { _hx_ClassId = 0x7d805dc1 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="cornerContour._CurveMath.CurveMath_Fields_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"cornerContour._CurveMath.CurveMath_Fields_"); }

		inline static ::hx::ObjectPtr< CurveMath_Fields__obj > __new() {
			::hx::ObjectPtr< CurveMath_Fields__obj > __this = new CurveMath_Fields__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< CurveMath_Fields__obj > __alloc(::hx::Ctx *_hx_ctx) {
			CurveMath_Fields__obj *__this = (CurveMath_Fields__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CurveMath_Fields__obj), false, "cornerContour._CurveMath.CurveMath_Fields_"));
			*(void **)__this = CurveMath_Fields__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CurveMath_Fields__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CurveMath_Fields_",1e,0a,99,59); }

		static void __boot();
		static Float distance(Float px,Float py,Float qx,Float qy);
		static ::Dynamic distance_dyn();

		static Float quadStep;
		static ::Array< Float > quadCurve(::Array< Float > p,Float ax,Float ay,Float bx,Float by,Float cx,Float cy);
		static ::Dynamic quadCurve_dyn();

		static Float cubicStep;
		static ::Array< Float > cubicCurve(::Array< Float > p,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy);
		static ::Dynamic cubicCurve_dyn();

		static Float calculateQuadStep(Float ax,Float ay,Float bx,Float by,Float cx,Float cy);
		static ::Dynamic calculateQuadStep_dyn();

		static Float calculateCubicStep(Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy);
		static ::Dynamic calculateCubicStep_dyn();

		static Float quadraticThru(Float t,Float s,Float c,Float e);
		static ::Dynamic quadraticThru_dyn();

		static Float quadratic(Float t,Float s,Float c,Float e);
		static ::Dynamic quadratic_dyn();

		static Float cubic(Float t,Float s,Float c1,Float c2,Float e);
		static ::Dynamic cubic_dyn();

};

} // end namespace cornerContour
} // end namespace _CurveMath

#endif /* INCLUDED_cornerContour__CurveMath_CurveMath_Fields_ */ 
