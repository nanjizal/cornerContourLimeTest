// Generated by Haxe 4.3.0-rc.1+5f599ba
#ifndef INCLUDED_cornerContourLimeTest_CornerContourLime
#define INCLUDED_cornerContourLimeTest_CornerContourLime

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
HX_DECLARE_CLASS1(cornerContour,IPen)
HX_DECLARE_CLASS1(cornerContour,Pen2D)
HX_DECLARE_CLASS1(cornerContour,Sketcher)
HX_DECLARE_CLASS1(cornerContourLimeTest,CornerContourLime)
HX_DECLARE_CLASS2(haxe,io,ArrayBufferViewImpl)
HX_DECLARE_CLASS1(justPath,IPathContext)
HX_DECLARE_CLASS2(lime,app,Application)
HX_DECLARE_CLASS2(lime,app,IModule)
HX_DECLARE_CLASS2(lime,app,Module)
HX_DECLARE_CLASS2(lime,graphics,RenderContext)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)

namespace cornerContourLimeTest{


class HXCPP_CLASS_ATTRIBUTES CornerContourLime_obj : public  ::lime::app::Application_obj
{
	public:
		typedef  ::lime::app::Application_obj super;
		typedef CornerContourLime_obj OBJ_;
		CornerContourLime_obj();

	public:
		enum { _hx_ClassId = 0x2bf009ee };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="cornerContourLimeTest.CornerContourLime")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"cornerContourLimeTest.CornerContourLime"); }
		static ::hx::ObjectPtr< CornerContourLime_obj > __new();
		static ::hx::ObjectPtr< CornerContourLime_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CornerContourLime_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CornerContourLime",1a,10,4a,bd); }

		static Float alphaChannel(int _hx_int);
		static ::Dynamic alphaChannel_dyn();

		static Float redChannel(int _hx_int);
		static ::Dynamic redChannel_dyn();

		static Float greenChannel(int _hx_int);
		static ::Dynamic greenChannel_dyn();

		static Float blueChannel(int _hx_int);
		static ::Dynamic blueChannel_dyn();

		 ::cornerContour::Sketcher sketcher;
		 ::cornerContour::Pen2D pen2D;
		::String vertexPosition;
		::String vertexColor;
		::String quadtest_d;
		::String cubictest_d;
		 ::lime::graphics::opengl::GLObject programColor;
		 ::lime::graphics::opengl::GLObject bufColor;
		 ::haxe::io::ArrayBufferViewImpl arr32;
		int len;
		int totalTriangles;
		int bufferLength;
		bool ready;
		Float runSeconds;
		 ::lime::graphics::opengl::GLObject program;
		int width;
		int height;
		void onWindowCreate();

		void update(int deltaTime);

		void render( ::lime::graphics::RenderContext context);

		void drawContours();
		::Dynamic drawContours_dyn();

		void rearrageDrawData();
		::Dynamic rearrageDrawData_dyn();

		Float gx(Float v);
		::Dynamic gx_dyn();

		Float gy(Float v);
		::Dynamic gy_dyn();

		void birdSVG();
		::Dynamic birdSVG_dyn();

		void cubicSVG();
		::Dynamic cubicSVG_dyn();

		void quadSVG();
		::Dynamic quadSVG_dyn();

		void arcSVG();
		::Dynamic arcSVG_dyn();

		void drawSet(::Array< ::String > arcs,::Array< int > col,Float x,Float y,Float s);
		::Dynamic drawSet_dyn();

		void draw_d(::String d,Float x,Float y,Float s,Float w,int color);
		::Dynamic draw_d_dyn();

		int crimson;
		int silver;
		int gainsboro;
		int lightGray;
		::String arc0_0;
		::String arc0_1;
		::String arc0_2;
		::String arc0_3;
		::String arc1_0;
		::String arc1_1;
		::String arc1_2;
		::String arc1_3;
		::String arc2_0;
		::String arc2_1;
		::String arc2_2;
		::String arc2_3;
		::String arc3_0;
		::String arc3_1;
		::String arc3_2;
		::String arc3_3;
		::String arc4_0;
		::String arc4_1;
		::String arc4_2;
		::String arc4_3;
		::String arc5_0;
		::String arc5_1;
		::String arc5_2;
		::String arc5_3;
		::String arc6_0;
		::String arc6_1;
		::String arc6_2;
		::String arc6_3;
		::String arc7_0;
		::String arc7_1;
		::String arc7_2;
		::String arc7_3;
		::String bird_d;
};

} // end namespace cornerContourLimeTest

#endif /* INCLUDED_cornerContourLimeTest_CornerContourLime */ 
